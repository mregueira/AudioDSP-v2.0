
AudioDSP-v2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005780  08005780  0002489c  2**0
                  CONTENTS
  4 .ARM          00000008  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005788  08005788  0002489c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000489c  20000000  08005790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000489c  0800a02c  0002489c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cc4  0800a02c  00024cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002489c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000248cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d109  00000000  00000000  0002490f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd0  00000000  00000000  00031a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  000337e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae2  00000000  00000000  000345b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217d9  00000000  00000000  00035092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010989  00000000  00000000  0005686b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e95fa  00000000  00000000  000671f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f54  00000000  00000000  001507f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00154744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000489c 	.word	0x2000489c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005744 	.word	0x08005744

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200048a0 	.word	0x200048a0
 80001d4:	08005744 	.word	0x08005744

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 5

void default_download_IC_1() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COREREGISTER_IC_1_ADDR, REG_COREREGISTER_IC_1_BYTE, R0_COREREGISTER_IC_1_Default );
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <default_download_IC_1+0x50>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	f640 011c 	movw	r1, #2076	; 0x81c
 8000df8:	2068      	movs	r0, #104	; 0x68
 8000dfa:	f001 f82b 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <default_download_IC_1+0x54>)
 8000e00:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	2068      	movs	r0, #104	; 0x68
 8000e0a:	f001 f823 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <default_download_IC_1+0x58>)
 8000e10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e14:	2100      	movs	r1, #0
 8000e16:	2068      	movs	r0, #104	; 0x68
 8000e18:	f001 f81c 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COREREGISTER_IC_1_ADDR , R3_HWCONFIGURATION_IC_1_SIZE, R3_HWCONFIGURATION_IC_1_Default );
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <default_download_IC_1+0x5c>)
 8000e1e:	2218      	movs	r2, #24
 8000e20:	f640 011c 	movw	r1, #2076	; 0x81c
 8000e24:	2068      	movs	r0, #104	; 0x68
 8000e26:	f001 f815 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COREREGISTER_IC_1_ADDR, REG_COREREGISTER_IC_1_BYTE, R4_COREREGISTER_IC_1_Default );
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <default_download_IC_1+0x60>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	f640 011c 	movw	r1, #2076	; 0x81c
 8000e32:	2068      	movs	r0, #104	; 0x68
 8000e34:	f001 f80e 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20002400 	.word	0x20002400
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20001400 	.word	0x20001400
 8000e48:	20002404 	.word	0x20002404
 8000e4c:	2000241c 	.word	0x2000241c

08000e50 <default_download_IC_2>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_2 5

void default_download_IC_2() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_2, REG_COREREGISTER_IC_2_ADDR, REG_COREREGISTER_IC_2_BYTE, R0_COREREGISTER_IC_2_Default );
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <default_download_IC_2+0x50>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	f640 011c 	movw	r1, #2076	; 0x81c
 8000e5c:	206a      	movs	r0, #106	; 0x6a
 8000e5e:	f000 fff9 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_2, PROGRAM_ADDR_IC_2, PROGRAM_SIZE_IC_2, Program_Data_IC_2 );
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <default_download_IC_2+0x54>)
 8000e64:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6c:	206a      	movs	r0, #106	; 0x6a
 8000e6e:	f000 fff1 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_2, PARAM_ADDR_IC_2, PARAM_SIZE_IC_2, Param_Data_IC_2 );
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <default_download_IC_2+0x58>)
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	2100      	movs	r1, #0
 8000e7a:	206a      	movs	r0, #106	; 0x6a
 8000e7c:	f000 ffea 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_2, REG_COREREGISTER_IC_2_ADDR , R3_HWCONFIGURATION_IC_2_SIZE, R3_HWCONFIGURATION_IC_2_Default );
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <default_download_IC_2+0x5c>)
 8000e82:	2218      	movs	r2, #24
 8000e84:	f640 011c 	movw	r1, #2076	; 0x81c
 8000e88:	206a      	movs	r0, #106	; 0x6a
 8000e8a:	f000 ffe3 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_2, REG_COREREGISTER_IC_2_ADDR, REG_COREREGISTER_IC_2_BYTE, R4_COREREGISTER_IC_2_Default );
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <default_download_IC_2+0x60>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	f640 011c 	movw	r1, #2076	; 0x81c
 8000e96:	206a      	movs	r0, #106	; 0x6a
 8000e98:	f000 ffdc 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20004820 	.word	0x20004820
 8000ea4:	20002420 	.word	0x20002420
 8000ea8:	20003820 	.word	0x20003820
 8000eac:	20004824 	.word	0x20004824
 8000eb0:	2000483c 	.word	0x2000483c

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b0c9      	sub	sp, #292	; 0x124
 8000eb8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  uint16_t pote_aux = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	  uint16_t BandAddress[ADC_POT+1]; // Addresses of filters
	  uint32_t vol_data[30]; // Fixed volume values
	  uint32_t boost_data[30]; // Fixed boost loudness values

	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG1_ADDR;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG6_ADDR;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG4_ADDR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG2_ADDR;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	  BandAddress[4] = MOD_LOUDNESSLHEXT1_ALG0_LEVEL0_ADDR;
 8000ede:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8000ee2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
	  BandAddress[5] = MOD_LOUDNESSLHEXT1_ALG0_LEVEL1_ADDR;
 8000ee6:	f240 13dd 	movw	r3, #477	; 0x1dd
 8000eea:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG6_ADDR;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG4_ADDR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG2_ADDR;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
	  BandAddress[9] = MOD_LOUD_DCINPALG5_ADDR;
 8000f00:	2305      	movs	r3, #5
 8000f02:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
	  BandAddress[10] = MOD_BANDSUB_SEL_DCINPALG3_ADDR;
 8000f06:	2304      	movs	r3, #4
 8000f08:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	  BandAddress[11] = MOD_VOL_ALG0_TARGET_ADDR;
 8000f0c:	239f      	movs	r3, #159	; 0x9f
 8000f0e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

	  vol_data[29] = 0x00800000; // 0dB
 8000f12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  vol_data[28] = 0x00721482; // -1dB
 8000f1a:	4b88      	ldr	r3, [pc, #544]	; (800113c <main+0x288>)
 8000f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  vol_data[27] = 0x0065AC8C; // -2dB
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <main+0x28c>)
 8000f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  vol_data[26] = 0x005A9DF7; // -3dB
 8000f26:	4b87      	ldr	r3, [pc, #540]	; (8001144 <main+0x290>)
 8000f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  vol_data[25] = 0x0050C335; // -4dB
 8000f2c:	4b86      	ldr	r3, [pc, #536]	; (8001148 <main+0x294>)
 8000f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  vol_data[24] = 0x0047FACC; // -5dB
 8000f32:	4b86      	ldr	r3, [pc, #536]	; (800114c <main+0x298>)
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  vol_data[23] = 0x004026E7; // -6dB
 8000f38:	4b85      	ldr	r3, [pc, #532]	; (8001150 <main+0x29c>)
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  vol_data[22] = 0x0037DFC0; // -7dB (-7.2dB)
 8000f3e:	4b85      	ldr	r3, [pc, #532]	; (8001154 <main+0x2a0>)
 8000f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  vol_data[21] = 0x0032F52C; // -8dB
 8000f44:	4b84      	ldr	r3, [pc, #528]	; (8001158 <main+0x2a4>)
 8000f46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  vol_data[20] = 0x002D6A86; // -9dB
 8000f4a:	4b84      	ldr	r3, [pc, #528]	; (800115c <main+0x2a8>)
 8000f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  vol_data[19] = 0x00287A26; // -10dB
 8000f50:	4b83      	ldr	r3, [pc, #524]	; (8001160 <main+0x2ac>)
 8000f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  vol_data[18] = 0x00241346; // -11dB
 8000f56:	4b83      	ldr	r3, [pc, #524]	; (8001164 <main+0x2b0>)
 8000f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	  vol_data[17] = 0x002026F3; // -12dB
 8000f5c:	4b82      	ldr	r3, [pc, #520]	; (8001168 <main+0x2b4>)
 8000f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  vol_data[16] = 0x001CA7D7; // -13dB
 8000f62:	4b82      	ldr	r3, [pc, #520]	; (800116c <main+0x2b8>)
 8000f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  vol_data[15] = 0x00198A13; // -14dB
 8000f68:	4b81      	ldr	r3, [pc, #516]	; (8001170 <main+0x2bc>)
 8000f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  vol_data[14] = 0x0016C310; // -15dB
 8000f6e:	4b81      	ldr	r3, [pc, #516]	; (8001174 <main+0x2c0>)
 8000f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  vol_data[13] = 0x00144960; // -16dB
 8000f74:	4b80      	ldr	r3, [pc, #512]	; (8001178 <main+0x2c4>)
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  vol_data[12] = 0x0012149A; // -17dB
 8000f7a:	4b80      	ldr	r3, [pc, #512]	; (800117c <main+0x2c8>)
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  vol_data[11] = 0x00101D3F; // -18dB
 8000f80:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <main+0x2cc>)
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  vol_data[10] = 0x000E5CA1; // -19dB
 8000f86:	4b7f      	ldr	r3, [pc, #508]	; (8001184 <main+0x2d0>)
 8000f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  vol_data[9] = 0x000CCCCC; // -20dB
 8000f8c:	4b7e      	ldr	r3, [pc, #504]	; (8001188 <main+0x2d4>)
 8000f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  vol_data[8] = 0x000B6873; // -21dB
 8000f92:	4b7e      	ldr	r3, [pc, #504]	; (800118c <main+0x2d8>)
 8000f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  vol_data[7] = 0x000A2ADA; // -22dB
 8000f98:	4b7d      	ldr	r3, [pc, #500]	; (8001190 <main+0x2dc>)
 8000f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  vol_data[6] = 0x00090FCB; // -23dB
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <main+0x2e0>)
 8000fa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  vol_data[5] = 0x00081385; // -24dB
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <main+0x2e4>)
 8000fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  vol_data[4] = 0x000732AE; // -25dB
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <main+0x2e8>)
 8000fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  vol_data[3] = 0x00066A4A; // -26dB
 8000fb0:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <main+0x2ec>)
 8000fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  vol_data[2] = 0x0005B7B1; // -27dB
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <main+0x2f0>)
 8000fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  vol_data[1] = 0x00051884; // -28dB
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <main+0x2f4>)
 8000fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
	  vol_data[0] = 0x00048AA7; // -29dB
 8000fc0:	4b7a      	ldr	r3, [pc, #488]	; (80011ac <main+0x2f8>)
 8000fc2:	67bb      	str	r3, [r7, #120]	; 0x78

	  boost_data[29] = 0x01400000; // 2.50
 8000fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000fcc:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8000fd0:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x01333333; // 2.40
 8000fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000fda:	4a75      	ldr	r2, [pc, #468]	; (80011b0 <main+0x2fc>)
 8000fdc:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x012B851E; // 2.34
 8000fde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000fe6:	4a73      	ldr	r2, [pc, #460]	; (80011b4 <main+0x300>)
 8000fe8:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x01228F5C; // 2.27
 8000fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ff2:	4a71      	ldr	r2, [pc, #452]	; (80011b8 <main+0x304>)
 8000ff4:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x01199999; // 2.20
 8000ff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ffa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ffe:	4a6f      	ldr	r2, [pc, #444]	; (80011bc <main+0x308>)
 8001000:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x0110A3D7; // 2.13
 8001002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001006:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800100a:	4a6d      	ldr	r2, [pc, #436]	; (80011c0 <main+0x30c>)
 800100c:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x0107AE14; // 2.06
 800100e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001012:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001016:	4a6b      	ldr	r2, [pc, #428]	; (80011c4 <main+0x310>)
 8001018:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x01000000; // 2.00
 800101a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800101e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001022:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001026:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x00F70A3D; // 1.93
 8001028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800102c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001030:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <main+0x314>)
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x00EE147A; // 1.86
 8001034:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001038:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800103c:	4a63      	ldr	r2, [pc, #396]	; (80011cc <main+0x318>)
 800103e:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x00E51EB8; // 1.79
 8001040:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001044:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001048:	4a61      	ldr	r2, [pc, #388]	; (80011d0 <main+0x31c>)
 800104a:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x00DC28F5; // 1.72
 800104c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001050:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001054:	4a5f      	ldr	r2, [pc, #380]	; (80011d4 <main+0x320>)
 8001056:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x00D47AE1; // 1.66
 8001058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800105c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001060:	4a5d      	ldr	r2, [pc, #372]	; (80011d8 <main+0x324>)
 8001062:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x00CB851E; // 1.59
 8001064:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001068:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800106c:	4a5b      	ldr	r2, [pc, #364]	; (80011dc <main+0x328>)
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x00C28F5C; // 1.52
 8001070:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001074:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001078:	4a59      	ldr	r2, [pc, #356]	; (80011e0 <main+0x32c>)
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x00B99999; // 1.45
 800107c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001080:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001084:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <main+0x330>)
 8001086:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x00B0A3D7; // 1.38
 8001088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001090:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <main+0x334>)
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x00A8F5C2; // 1.32
 8001094:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001098:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800109c:	4a53      	ldr	r2, [pc, #332]	; (80011ec <main+0x338>)
 800109e:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x00A00000; // 1.25
 80010a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010a8:	f44f 0220 	mov.w	r2, #10485760	; 0xa00000
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
	  boost_data[10] = 0x00970A3D; // 1.18
 80010ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010b6:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <main+0x33c>)
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x008E147A; // 1.11
 80010ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010c2:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <main+0x340>)
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x00851EB8; // 1.04
 80010c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010ce:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <main+0x344>)
 80010d0:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x007D70A3; // 0.98
 80010d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010da:	4a48      	ldr	r2, [pc, #288]	; (80011fc <main+0x348>)
 80010dc:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00747AE1; // 0.91
 80010de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010e6:	4a46      	ldr	r2, [pc, #280]	; (8001200 <main+0x34c>)
 80010e8:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x006B851E; // 0.84
 80010ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010f2:	4a44      	ldr	r2, [pc, #272]	; (8001204 <main+0x350>)
 80010f4:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00628F5C; // 0.77
 80010f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010fe:	4a42      	ldr	r2, [pc, #264]	; (8001208 <main+0x354>)
 8001100:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00599999; // 0.70
 8001102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001106:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800110a:	4a40      	ldr	r2, [pc, #256]	; (800120c <main+0x358>)
 800110c:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x0051EB85; // 0.64
 800110e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001112:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001116:	4a3e      	ldr	r2, [pc, #248]	; (8001210 <main+0x35c>)
 8001118:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0048F5C2; // 0.57
 800111a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800111e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001122:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <main+0x360>)
 8001124:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00400000; // 0.50
 8001126:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800112a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800112e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001132:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 8001134:	2300      	movs	r3, #0
 8001136:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800113a:	e0bc      	b.n	80012b6 <main+0x402>
 800113c:	00721482 	.word	0x00721482
 8001140:	0065ac8c 	.word	0x0065ac8c
 8001144:	005a9df7 	.word	0x005a9df7
 8001148:	0050c335 	.word	0x0050c335
 800114c:	0047facc 	.word	0x0047facc
 8001150:	004026e7 	.word	0x004026e7
 8001154:	0037dfc0 	.word	0x0037dfc0
 8001158:	0032f52c 	.word	0x0032f52c
 800115c:	002d6a86 	.word	0x002d6a86
 8001160:	00287a26 	.word	0x00287a26
 8001164:	00241346 	.word	0x00241346
 8001168:	002026f3 	.word	0x002026f3
 800116c:	001ca7d7 	.word	0x001ca7d7
 8001170:	00198a13 	.word	0x00198a13
 8001174:	0016c310 	.word	0x0016c310
 8001178:	00144960 	.word	0x00144960
 800117c:	0012149a 	.word	0x0012149a
 8001180:	00101d3f 	.word	0x00101d3f
 8001184:	000e5ca1 	.word	0x000e5ca1
 8001188:	000ccccc 	.word	0x000ccccc
 800118c:	000b6873 	.word	0x000b6873
 8001190:	000a2ada 	.word	0x000a2ada
 8001194:	00090fcb 	.word	0x00090fcb
 8001198:	00081385 	.word	0x00081385
 800119c:	000732ae 	.word	0x000732ae
 80011a0:	00066a4a 	.word	0x00066a4a
 80011a4:	0005b7b1 	.word	0x0005b7b1
 80011a8:	00051884 	.word	0x00051884
 80011ac:	00048aa7 	.word	0x00048aa7
 80011b0:	01333333 	.word	0x01333333
 80011b4:	012b851e 	.word	0x012b851e
 80011b8:	01228f5c 	.word	0x01228f5c
 80011bc:	01199999 	.word	0x01199999
 80011c0:	0110a3d7 	.word	0x0110a3d7
 80011c4:	0107ae14 	.word	0x0107ae14
 80011c8:	00f70a3d 	.word	0x00f70a3d
 80011cc:	00ee147a 	.word	0x00ee147a
 80011d0:	00e51eb8 	.word	0x00e51eb8
 80011d4:	00dc28f5 	.word	0x00dc28f5
 80011d8:	00d47ae1 	.word	0x00d47ae1
 80011dc:	00cb851e 	.word	0x00cb851e
 80011e0:	00c28f5c 	.word	0x00c28f5c
 80011e4:	00b99999 	.word	0x00b99999
 80011e8:	00b0a3d7 	.word	0x00b0a3d7
 80011ec:	00a8f5c2 	.word	0x00a8f5c2
 80011f0:	00970a3d 	.word	0x00970a3d
 80011f4:	008e147a 	.word	0x008e147a
 80011f8:	00851eb8 	.word	0x00851eb8
 80011fc:	007d70a3 	.word	0x007d70a3
 8001200:	00747ae1 	.word	0x00747ae1
 8001204:	006b851e 	.word	0x006b851e
 8001208:	00628f5c 	.word	0x00628f5c
 800120c:	00599999 	.word	0x00599999
 8001210:	0051eb85 	.word	0x0051eb85
 8001214:	0048f5c2 	.word	0x0048f5c2
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 8001218:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f92d 	bl	800047c <__aeabi_i2d>
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4bc1      	ldr	r3, [pc, #772]	; (800152c <main+0x678>)
 8001228:	f7ff f992 	bl	8000550 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4bbd      	ldr	r3, [pc, #756]	; (8001530 <main+0x67c>)
 800123a:	f7ff fab3 	bl	80007a4 <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4bba      	ldr	r3, [pc, #744]	; (8001534 <main+0x680>)
 800124c:	f7fe ffca 	bl	80001e4 <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	ec43 2b17 	vmov	d7, r2, r3
 8001258:	eeb0 0a47 	vmov.f32	s0, s14
 800125c:	eef0 0a67 	vmov.f32	s1, s15
 8001260:	f003 ffe2 	bl	8005228 <log10>
 8001264:	ec51 0b10 	vmov	r0, r1, d0
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4bb2      	ldr	r3, [pc, #712]	; (8001538 <main+0x684>)
 800126e:	f7ff f96f 	bl	8000550 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	f8b7 410e 	ldrh.w	r4, [r7, #270]	; 0x10e
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc17 	bl	8000ab0 <__aeabi_d2uiz>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	4bad      	ldr	r3, [pc, #692]	; (800153c <main+0x688>)
 8001288:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 800128c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001290:	031b      	lsls	r3, r3, #12
 8001292:	4aab      	ldr	r2, [pc, #684]	; (8001540 <main+0x68c>)
 8001294:	fb82 1203 	smull	r1, r2, r2, r3
 8001298:	441a      	add	r2, r3
 800129a:	1112      	asrs	r2, r2, #4
 800129c:	17db      	asrs	r3, r3, #31
 800129e:	1ad2      	subs	r2, r2, r3
 80012a0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80012a4:	b291      	uxth	r1, r2
 80012a6:	4aa7      	ldr	r2, [pc, #668]	; (8001544 <main+0x690>)
 80012a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 80012ac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80012b0:	3301      	adds	r3, #1
 80012b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80012b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80012ba:	2b1d      	cmp	r3, #29
 80012bc:	d9ac      	bls.n	8001218 <main+0x364>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012be:	f001 f949 	bl	8002554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c2:	f000 fac1 	bl	8001848 <SystemClock_Config>
//  MX_I2C3_Init();
//  MX_TIM2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f000 fd39 	bl	8001d3c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ca:	f000 fc3f 	bl	8001b4c <MX_I2C1_Init>
  MX_I2C2_Init();
 80012ce:	f000 fc6b 	bl	8001ba8 <MX_I2C2_Init>
  MX_I2C3_Init();
 80012d2:	f000 fc97 	bl	8001c04 <MX_I2C3_Init>

  MX_DMA_Init();
 80012d6:	f000 fd11 	bl	8001cfc <MX_DMA_Init>
  MX_ADC1_Init();
 80012da:	f000 fb21 	bl	8001920 <MX_ADC1_Init>

  MX_TIM2_Init();
 80012de:	f000 fcbf 	bl	8001c60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Disable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e8:	4897      	ldr	r0, [pc, #604]	; (8001548 <main+0x694>)
 80012ea:	f002 fbb7 	bl	8003a5c <HAL_GPIO_WritePin>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f4:	4894      	ldr	r0, [pc, #592]	; (8001548 <main+0x694>)
 80012f6:	f002 fbb1 	bl	8003a5c <HAL_GPIO_WritePin>

  // Configure Sampling Rate SR = Standard => 0
  HAL_GPIO_WritePin(SR_GPIO_Port, SR_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001300:	4892      	ldr	r0, [pc, #584]	; (800154c <main+0x698>)
 8001302:	f002 fbab 	bl	8003a5c <HAL_GPIO_WritePin>
  // Configure System Clock SCKO1 CSEL = 0 (default)
  HAL_GPIO_WritePin(CSEL_GPIO_Port, CSEL_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130c:	488f      	ldr	r0, [pc, #572]	; (800154c <main+0x698>)
 800130e:	f002 fba5 	bl	8003a5c <HAL_GPIO_WritePin>
  // Configure Sampling Frequency Group = 32KHz => 10
  HAL_GPIO_WritePin(FS2_GPIO_Port, FS2_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001318:	488c      	ldr	r0, [pc, #560]	; (800154c <main+0x698>)
 800131a:	f002 fb9f 	bl	8003a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FS1_GPIO_Port, FS1_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4889      	ldr	r0, [pc, #548]	; (800154c <main+0x698>)
 8001326:	f002 fb99 	bl	8003a5c <HAL_GPIO_WritePin>

  // Configure PLL Mode
  // 256 x 48KHz = 12.288MHz => 01
  HAL_GPIO_WritePin(PLL_MODE0_GPIO_Port, PLL_MODE0_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	4885      	ldr	r0, [pc, #532]	; (8001548 <main+0x694>)
 8001332:	f002 fb93 	bl	8003a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PLL_MODE1_GPIO_Port, PLL_MODE1_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133c:	4882      	ldr	r0, [pc, #520]	; (8001548 <main+0x694>)
 800133e:	f002 fb8d 	bl	8003a5c <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001348:	487f      	ldr	r0, [pc, #508]	; (8001548 <main+0x694>)
 800134a:	f002 fb87 	bl	8003a5c <HAL_GPIO_WritePin>

  HAL_Delay(500);
 800134e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001352:	f001 f971 	bl	8002638 <HAL_Delay>

  // Configure DAC format to I2S 16-24 bit
  auxData[0] = 0x24;
 8001356:	4b7e      	ldr	r3, [pc, #504]	; (8001550 <main+0x69c>)
 8001358:	2224      	movs	r2, #36	; 0x24
 800135a:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 800135c:	4b7c      	ldr	r3, [pc, #496]	; (8001550 <main+0x69c>)
 800135e:	2200      	movs	r2, #0
 8001360:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x09, 1, auxData, 1, 1000);
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	4b78      	ldr	r3, [pc, #480]	; (8001550 <main+0x69c>)
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	2209      	movs	r2, #9
 8001374:	2198      	movs	r1, #152	; 0x98
 8001376:	4877      	ldr	r0, [pc, #476]	; (8001554 <main+0x6a0>)
 8001378:	f002 fcce 	bl	8003d18 <HAL_I2C_Mem_Write>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b75      	ldr	r3, [pc, #468]	; (8001558 <main+0x6a4>)
 8001382:	701a      	strb	r2, [r3, #0]

  // Enable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	486f      	ldr	r0, [pc, #444]	; (8001548 <main+0x694>)
 800138c:	f002 fb66 	bl	8003a5c <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8001390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001394:	f001 f950 	bl	8002638 <HAL_Delay>

  default_download_IC_1();
 8001398:	f7ff fd28 	bl	8000dec <default_download_IC_1>
  HAL_Delay(500);
 800139c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a0:	f001 f94a 	bl	8002638 <HAL_Delay>
  default_download_IC_2();
 80013a4:	f7ff fd54 	bl	8000e50 <default_download_IC_2>
  HAL_Delay(500);
 80013a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ac:	f001 f944 	bl	8002638 <HAL_Delay>

  HAL_TIM_Base_Start(&htim2);
 80013b0:	486a      	ldr	r0, [pc, #424]	; (800155c <main+0x6a8>)
 80013b2:	f003 fc5d 	bl	8004c70 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 80013b6:	220c      	movs	r2, #12
 80013b8:	4969      	ldr	r1, [pc, #420]	; (8001560 <main+0x6ac>)
 80013ba:	486a      	ldr	r0, [pc, #424]	; (8001564 <main+0x6b0>)
 80013bc:	f001 f9a4 	bl	8002708 <HAL_ADC_Start_DMA>

  HAL_Delay(250);
 80013c0:	20fa      	movs	r0, #250	; 0xfa
 80013c2:	f001 f939 	bl	8002638 <HAL_Delay>

  for(k=0; k<ADC_POT; k++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80013cc:	e010      	b.n	80013f0 <main+0x53c>
  {
	  pote[k] = 14;
 80013ce:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <main+0x6b4>)
 80013d4:	210e      	movs	r1, #14
 80013d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  flag[k] = 1;
 80013da:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80013de:	4a63      	ldr	r2, [pc, #396]	; (800156c <main+0x6b8>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(k=0; k<ADC_POT; k++)
 80013e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80013ea:	3301      	adds	r3, #1
 80013ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80013f0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80013f4:	2b0b      	cmp	r3, #11
 80013f6:	d9ea      	bls.n	80013ce <main+0x51a>
  }
  aux[0] = 0x00;
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <main+0x6bc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
  aux[1] = 0x00;
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <main+0x6bc>)
 8001400:	2200      	movs	r2, #0
 8001402:	705a      	strb	r2, [r3, #1]
  aux[2] = 0x00;
 8001404:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <main+0x6bc>)
 8001406:	2200      	movs	r2, #0
 8001408:	709a      	strb	r2, [r3, #2]
  aux[3] = 0x00;
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <main+0x6bc>)
 800140c:	2200      	movs	r2, #0
 800140e:	70da      	strb	r2, [r3, #3]

  for(k=0; k<4; k++) // Filters 32Hz - 512Hz
 8001410:	2300      	movs	r3, #0
 8001412:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001416:	e011      	b.n	800143c <main+0x588>
  {
	  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[k], 4, aux);
 8001418:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001422:	443b      	add	r3, r7
 8001424:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 8001428:	4b51      	ldr	r3, [pc, #324]	; (8001570 <main+0x6bc>)
 800142a:	2204      	movs	r2, #4
 800142c:	2068      	movs	r0, #104	; 0x68
 800142e:	f000 fd11 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
  for(k=0; k<4; k++) // Filters 32Hz - 512Hz
 8001432:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001436:	3301      	adds	r3, #1
 8001438:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800143c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001440:	2b03      	cmp	r3, #3
 8001442:	d9e9      	bls.n	8001418 <main+0x564>
  }
  for(k=6; k<(ADC_POT-3); k++) // Filters 1KHz - 16KHz
 8001444:	2306      	movs	r3, #6
 8001446:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800144a:	e011      	b.n	8001470 <main+0x5bc>
  {
      SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_2, BandAddress[k], 4, aux);
 800144c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001456:	443b      	add	r3, r7
 8001458:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <main+0x6bc>)
 800145e:	2204      	movs	r2, #4
 8001460:	206a      	movs	r0, #106	; 0x6a
 8001462:	f000 fcf7 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
  for(k=6; k<(ADC_POT-3); k++) // Filters 1KHz - 16KHz
 8001466:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800146a:	3301      	adds	r3, #1
 800146c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001470:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001474:	2b08      	cmp	r3, #8
 8001476:	d9e9      	bls.n	800144c <main+0x598>
  }
  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[ADC_POT-2], 4, aux); // Subwoofer
 8001478:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <main+0x6bc>)
 800147e:	2204      	movs	r2, #4
 8001480:	2068      	movs	r0, #104	; 0x68
 8001482:	f000 fce7 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[ADC_POT-1], 4, aux); // Volume
 8001486:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <main+0x6bc>)
 800148c:	2204      	movs	r2, #4
 800148e:	2068      	movs	r0, #104	; 0x68
 8001490:	f000 fce0 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>

  HAL_Delay(250);
 8001494:	20fa      	movs	r0, #250	; 0xfa
 8001496:	f001 f8cf 	bl	8002638 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  aux[0] = 0x00;
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <main+0x6bc>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <main+0x6bc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <main+0x6bc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	709a      	strb	r2, [r3, #2]

	  for(k=0; k<4; k++) // Filters 32Hz - 512Hz
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80014b2:	e029      	b.n	8001508 <main+0x654>
	  {
		  if(flag[k] == 1)
 80014b4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014b8:	4a2c      	ldr	r2, [pc, #176]	; (800156c <main+0x6b8>)
 80014ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d11d      	bne.n	80014fe <main+0x64a>
		  {
			  flag[k] = 0;
 80014c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014c6:	4a29      	ldr	r2, [pc, #164]	; (800156c <main+0x6b8>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  aux[3] = 29 - pote[k];
 80014ce:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <main+0x6b4>)
 80014d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f1c3 031d 	rsb	r3, r3, #29
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <main+0x6bc>)
 80014e2:	70da      	strb	r2, [r3, #3]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[k], 4, aux);
 80014e4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80014ee:	443b      	add	r3, r7
 80014f0:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <main+0x6bc>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	2068      	movs	r0, #104	; 0x68
 80014fa:	f000 fcab 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  for(k=0; k<4; k++) // Filters 32Hz - 512Hz
 80014fe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001502:	3301      	adds	r3, #1
 8001504:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001508:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800150c:	2b03      	cmp	r3, #3
 800150e:	d9d1      	bls.n	80014b4 <main+0x600>
		  }
	  }

	  aux[0] = 0x00;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <main+0x6bc>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <main+0x6bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <main+0x6bc>)
 800151e:	2200      	movs	r2, #0
 8001520:	709a      	strb	r2, [r3, #2]

	  for(k=6; k<(ADC_POT-3); k++) // Filters 1KHz - 16KHz
 8001522:	2306      	movs	r3, #6
 8001524:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001528:	e04e      	b.n	80015c8 <main+0x714>
 800152a:	bf00      	nop
 800152c:	40080000 	.word	0x40080000
 8001530:	40240000 	.word	0x40240000
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	40b00000 	.word	0x40b00000
 800153c:	20004af4 	.word	0x20004af4
 8001540:	88888889 	.word	0x88888889
 8001544:	20004b30 	.word	0x20004b30
 8001548:	40020400 	.word	0x40020400
 800154c:	40020000 	.word	0x40020000
 8001550:	20004aa8 	.word	0x20004aa8
 8001554:	20004a08 	.word	0x20004a08
 8001558:	20004aa4 	.word	0x20004aa4
 800155c:	20004a5c 	.word	0x20004a5c
 8001560:	20004aac 	.word	0x20004aac
 8001564:	200048b8 	.word	0x200048b8
 8001568:	20004adc 	.word	0x20004adc
 800156c:	20004b6c 	.word	0x20004b6c
 8001570:	20004b84 	.word	0x20004b84
	  {
		  if(flag[k] == 1)
 8001574:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001578:	4ab0      	ldr	r2, [pc, #704]	; (800183c <main+0x988>)
 800157a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d11d      	bne.n	80015be <main+0x70a>
		  {
			  flag[k] = 0;
 8001582:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001586:	4aad      	ldr	r2, [pc, #692]	; (800183c <main+0x988>)
 8001588:	2100      	movs	r1, #0
 800158a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  aux[3] = 29 - pote[k];
 800158e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001592:	4aab      	ldr	r2, [pc, #684]	; (8001840 <main+0x98c>)
 8001594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f1c3 031d 	rsb	r3, r3, #29
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4ba8      	ldr	r3, [pc, #672]	; (8001844 <main+0x990>)
 80015a2:	70da      	strb	r2, [r3, #3]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_2, BandAddress[k], 4, aux);
 80015a4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80015ae:	443b      	add	r3, r7
 80015b0:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 80015b4:	4ba3      	ldr	r3, [pc, #652]	; (8001844 <main+0x990>)
 80015b6:	2204      	movs	r2, #4
 80015b8:	206a      	movs	r0, #106	; 0x6a
 80015ba:	f000 fc4b 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  for(k=6; k<(ADC_POT-3); k++) // Filters 1KHz - 16KHz
 80015be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80015c2:	3301      	adds	r3, #1
 80015c4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80015c8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d9d1      	bls.n	8001574 <main+0x6c0>
		  }
	  }

	  aux[0] = 0x00;
 80015d0:	4b9c      	ldr	r3, [pc, #624]	; (8001844 <main+0x990>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 80015d6:	4b9b      	ldr	r3, [pc, #620]	; (8001844 <main+0x990>)
 80015d8:	2200      	movs	r2, #0
 80015da:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 80015dc:	4b99      	ldr	r3, [pc, #612]	; (8001844 <main+0x990>)
 80015de:	2200      	movs	r2, #0
 80015e0:	709a      	strb	r2, [r3, #2]

	  if(flag[ADC_POT-2] == 1) // Subwoofer
 80015e2:	4b96      	ldr	r3, [pc, #600]	; (800183c <main+0x988>)
 80015e4:	8a9b      	ldrh	r3, [r3, #20]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <main+0x75a>
	  {
		  flag[ADC_POT-2] = 0;
 80015ea:	4b94      	ldr	r3, [pc, #592]	; (800183c <main+0x988>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	829a      	strh	r2, [r3, #20]
		  aux[3] = 29 - pote[ADC_POT-2];
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <main+0x98c>)
 80015f2:	8a9b      	ldrh	r3, [r3, #20]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f1c3 031d 	rsb	r3, r3, #29
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b91      	ldr	r3, [pc, #580]	; (8001844 <main+0x990>)
 80015fe:	70da      	strb	r2, [r3, #3]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[ADC_POT-2], 4, aux);
 8001600:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 8001604:	4b8f      	ldr	r3, [pc, #572]	; (8001844 <main+0x990>)
 8001606:	2204      	movs	r2, #4
 8001608:	2068      	movs	r0, #104	; 0x68
 800160a:	f000 fc23 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  aux[0] = 0x00;
 800160e:	4b8d      	ldr	r3, [pc, #564]	; (8001844 <main+0x990>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 8001614:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <main+0x990>)
 8001616:	2200      	movs	r2, #0
 8001618:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 800161a:	4b8a      	ldr	r3, [pc, #552]	; (8001844 <main+0x990>)
 800161c:	2200      	movs	r2, #0
 800161e:	709a      	strb	r2, [r3, #2]

	  if(flag[ADC_POT-1] == 1) // Volume
 8001620:	4b86      	ldr	r3, [pc, #536]	; (800183c <main+0x988>)
 8001622:	8adb      	ldrh	r3, [r3, #22]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d13e      	bne.n	80016a6 <main+0x7f2>
	  {
		  flag[ADC_POT-1] = 0;
 8001628:	4b84      	ldr	r3, [pc, #528]	; (800183c <main+0x988>)
 800162a:	2200      	movs	r2, #0
 800162c:	82da      	strh	r2, [r3, #22]
		  pote_aux = 29 - pote[ADC_POT-1];
 800162e:	4b84      	ldr	r3, [pc, #528]	; (8001840 <main+0x98c>)
 8001630:	8adb      	ldrh	r3, [r3, #22]
 8001632:	f1c3 031d 	rsb	r3, r3, #29
 8001636:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		  aux[3] = 0xFF & (vol_data[pote_aux]);
 800163a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001644:	443b      	add	r3, r7
 8001646:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <main+0x990>)
 800164e:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001650:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800165a:	443b      	add	r3, r7
 800165c:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b77      	ldr	r3, [pc, #476]	; (8001844 <main+0x990>)
 8001666:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001668:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001672:	443b      	add	r3, r7
 8001674:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b71      	ldr	r3, [pc, #452]	; (8001844 <main+0x990>)
 800167e:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001680:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800168a:	443b      	add	r3, r7
 800168c:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001690:	0e1b      	lsrs	r3, r3, #24
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <main+0x990>)
 8001696:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[ADC_POT-1], 4, aux);
 8001698:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <main+0x990>)
 800169e:	2204      	movs	r2, #4
 80016a0:	2068      	movs	r0, #104	; 0x68
 80016a2:	f000 fbd7 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[4] == 1) // Loudness Low Boost
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <main+0x988>)
 80016a8:	891b      	ldrh	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d13e      	bne.n	800172c <main+0x878>
	  {
		  flag[4] = 0;
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <main+0x988>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	811a      	strh	r2, [r3, #8]
		  pote_aux = 29 - pote[4];
 80016b4:	4b62      	ldr	r3, [pc, #392]	; (8001840 <main+0x98c>)
 80016b6:	891b      	ldrh	r3, [r3, #8]
 80016b8:	f1c3 031d 	rsb	r3, r3, #29
 80016bc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		  aux[3] = 0xFF & (boost_data[pote_aux]);
 80016c0:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 80016c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <main+0x990>)
 80016d4:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((boost_data[pote_aux])>>8);
 80016d6:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 80016da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <main+0x990>)
 80016ec:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((boost_data[pote_aux])>>16);
 80016ee:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 80016f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b50      	ldr	r3, [pc, #320]	; (8001844 <main+0x990>)
 8001704:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001706:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 800170a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800170e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001716:	0e1b      	lsrs	r3, r3, #24
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <main+0x990>)
 800171c:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_2, BandAddress[4], 4, aux);
 800171e:	f8b7 10f8 	ldrh.w	r1, [r7, #248]	; 0xf8
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <main+0x990>)
 8001724:	2204      	movs	r2, #4
 8001726:	206a      	movs	r0, #106	; 0x6a
 8001728:	f000 fb94 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[5] == 1) // Loudness High Boost
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <main+0x988>)
 800172e:	895b      	ldrh	r3, [r3, #10]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d13e      	bne.n	80017b2 <main+0x8fe>
	  {
		  flag[5] = 0;
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <main+0x988>)
 8001736:	2200      	movs	r2, #0
 8001738:	815a      	strh	r2, [r3, #10]
		  pote_aux = 29 - pote[5];
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <main+0x98c>)
 800173c:	895b      	ldrh	r3, [r3, #10]
 800173e:	f1c3 031d 	rsb	r3, r3, #29
 8001742:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		  aux[3] = 0xFF & (boost_data[pote_aux]);
 8001746:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 800174a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800174e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <main+0x990>)
 800175a:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((boost_data[pote_aux])>>8);
 800175c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001760:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <main+0x990>)
 8001772:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001774:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001778:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800177c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <main+0x990>)
 800178a:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((boost_data[pote_aux])>>24);
 800178c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001790:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001794:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	0e1b      	lsrs	r3, r3, #24
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <main+0x990>)
 80017a2:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_2, BandAddress[5], 4, aux);
 80017a4:	f8b7 10fa 	ldrh.w	r1, [r7, #250]	; 0xfa
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <main+0x990>)
 80017aa:	2204      	movs	r2, #4
 80017ac:	206a      	movs	r0, #106	; 0x6a
 80017ae:	f000 fb51 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[9] == 1) // Loudness
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <main+0x988>)
 80017b4:	8a5b      	ldrh	r3, [r3, #18]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f47f ae6f 	bne.w	800149a <main+0x5e6>
	  {
		  flag[9] = 0;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <main+0x988>)
 80017be:	2200      	movs	r2, #0
 80017c0:	825a      	strh	r2, [r3, #18]
		  pote_aux = 29 - pote[9];
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <main+0x98c>)
 80017c4:	8a5b      	ldrh	r3, [r3, #18]
 80017c6:	f1c3 031d 	rsb	r3, r3, #29
 80017ca:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		  aux[3] = 0xFF & (vol_data[pote_aux]);
 80017ce:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017d8:	443b      	add	r3, r7
 80017da:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <main+0x990>)
 80017e2:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((vol_data[pote_aux])>>8);
 80017e4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017ee:	443b      	add	r3, r7
 80017f0:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <main+0x990>)
 80017fa:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((vol_data[pote_aux])>>16);
 80017fc:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001806:	443b      	add	r3, r7
 8001808:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <main+0x990>)
 8001812:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001814:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800181e:	443b      	add	r3, r7
 8001820:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001824:	0e1b      	lsrs	r3, r3, #24
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <main+0x990>)
 800182a:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_2, BandAddress[9], 4, aux);
 800182c:	f8b7 1102 	ldrh.w	r1, [r7, #258]	; 0x102
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <main+0x990>)
 8001832:	2204      	movs	r2, #4
 8001834:	206a      	movs	r0, #106	; 0x6a
 8001836:	f000 fb0d 	bl	8001e54 <SIGMA_WRITE_REGISTER_BLOCK>
	  aux[0] = 0x00;
 800183a:	e62e      	b.n	800149a <main+0x5e6>
 800183c:	20004b6c 	.word	0x20004b6c
 8001840:	20004adc 	.word	0x20004adc
 8001844:	20004b84 	.word	0x20004b84

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	; 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fcb4 	bl	80051c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <SystemClock_Config+0xd0>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a28      	ldr	r2, [pc, #160]	; (8001918 <SystemClock_Config+0xd0>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <SystemClock_Config+0xd0>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <SystemClock_Config+0xd4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <SystemClock_Config+0xd4>)
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SystemClock_Config+0xd4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 27;
 80018bc:	231b      	movs	r3, #27
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80018c0:	23a0      	movs	r3, #160	; 0xa0
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fd39 	bl	8004348 <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018dc:	f000 fbe8 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e0:	230f      	movs	r3, #15
 80018e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e4:	2302      	movs	r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ff9a 	bl	8004838 <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800190a:	f000 fbd1 	bl	80020b0 <Error_Handler>
  }
}
 800190e:	bf00      	nop
 8001910:	3750      	adds	r7, #80	; 0x50
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001932:	4b84      	ldr	r3, [pc, #528]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001934:	4a84      	ldr	r2, [pc, #528]	; (8001b48 <MX_ADC1_Init+0x228>)
 8001936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001938:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <MX_ADC1_Init+0x224>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800193e:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001944:	4b7f      	ldr	r3, [pc, #508]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001946:	2201      	movs	r2, #1
 8001948:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800194a:	4b7e      	ldr	r3, [pc, #504]	; (8001b44 <MX_ADC1_Init+0x224>)
 800194c:	2200      	movs	r2, #0
 800194e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001958:	4b7a      	ldr	r3, [pc, #488]	; (8001b44 <MX_ADC1_Init+0x224>)
 800195a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001960:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001962:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001968:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <MX_ADC1_Init+0x224>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 800196e:	4b75      	ldr	r3, [pc, #468]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001970:	220f      	movs	r2, #15
 8001972:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800197c:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <MX_ADC1_Init+0x224>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001982:	4870      	ldr	r0, [pc, #448]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001984:	f000 fe7c 	bl	8002680 <HAL_ADC_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800198e:	f000 fb8f 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800199a:	2301      	movs	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4868      	ldr	r0, [pc, #416]	; (8001b44 <MX_ADC1_Init+0x224>)
 80019a4:	f000 ffb4 	bl	8002910 <HAL_ADC_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019ae:	f000 fb7f 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	4619      	mov	r1, r3
 80019be:	4861      	ldr	r0, [pc, #388]	; (8001b44 <MX_ADC1_Init+0x224>)
 80019c0:	f000 ffa6 	bl	8002910 <HAL_ADC_ConfigChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80019ca:	f000 fb71 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019d2:	2303      	movs	r3, #3
 80019d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	485a      	ldr	r0, [pc, #360]	; (8001b44 <MX_ADC1_Init+0x224>)
 80019dc:	f000 ff98 	bl	8002910 <HAL_ADC_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80019e6:	f000 fb63 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019ea:	2303      	movs	r3, #3
 80019ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80019ee:	2304      	movs	r3, #4
 80019f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4853      	ldr	r0, [pc, #332]	; (8001b44 <MX_ADC1_Init+0x224>)
 80019f8:	f000 ff8a 	bl	8002910 <HAL_ADC_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001a02:	f000 fb55 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a06:	2304      	movs	r3, #4
 8001a08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	484c      	ldr	r0, [pc, #304]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001a14:	f000 ff7c 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001a1e:	f000 fb47 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a22:	2305      	movs	r3, #5
 8001a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001a26:	2306      	movs	r3, #6
 8001a28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4845      	ldr	r0, [pc, #276]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001a30:	f000 ff6e 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001a3a:	f000 fb39 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001a42:	2307      	movs	r3, #7
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	483e      	ldr	r0, [pc, #248]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001a4c:	f000 ff60 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8001a56:	f000 fb2b 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	4837      	ldr	r0, [pc, #220]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001a68:	f000 ff52 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001a72:	f000 fb1d 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a76:	2308      	movs	r3, #8
 8001a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001a7a:	2309      	movs	r3, #9
 8001a7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4619      	mov	r1, r3
 8001a82:	4830      	ldr	r0, [pc, #192]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001a84:	f000 ff44 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8001a8e:	f000 fb0f 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a92:	2309      	movs	r3, #9
 8001a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001a96:	230a      	movs	r3, #10
 8001a98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4829      	ldr	r0, [pc, #164]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001aa0:	f000 ff36 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001aaa:	f000 fb01 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001aae:	230a      	movs	r3, #10
 8001ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001ab2:	230b      	movs	r3, #11
 8001ab4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4822      	ldr	r0, [pc, #136]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001abc:	f000 ff28 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001ac6:	f000 faf3 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001aca:	230b      	movs	r3, #11
 8001acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481b      	ldr	r0, [pc, #108]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001ad8:	f000 ff1a 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8001ae2:	f000 fae5 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001aea:	230d      	movs	r3, #13
 8001aec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aee:	463b      	mov	r3, r7
 8001af0:	4619      	mov	r1, r3
 8001af2:	4814      	ldr	r0, [pc, #80]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001af4:	f000 ff0c 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8001afe:	f000 fad7 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b02:	230d      	movs	r3, #13
 8001b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001b06:	230e      	movs	r3, #14
 8001b08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001b10:	f000 fefe 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8001b1a:	f000 fac9 	bl	80020b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001b1e:	230e      	movs	r3, #14
 8001b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001b22:	230f      	movs	r3, #15
 8001b24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <MX_ADC1_Init+0x224>)
 8001b2c:	f000 fef0 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8001b36:	f000 fabb 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200048b8 	.word	0x200048b8
 8001b48:	40012000 	.word	0x40012000

08001b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <MX_I2C1_Init+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <MX_I2C1_Init+0x58>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b8a:	f001 ff81 	bl	8003a90 <HAL_I2C_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b94:	f000 fa8c 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20004960 	.word	0x20004960
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	00061a80 	.word	0x00061a80

08001ba8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <MX_I2C2_Init+0x54>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <MX_I2C2_Init+0x58>)
 8001bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <MX_I2C2_Init+0x50>)
 8001be6:	f001 ff53 	bl	8003a90 <HAL_I2C_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bf0:	f000 fa5e 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200049b4 	.word	0x200049b4
 8001bfc:	40005800 	.word	0x40005800
 8001c00:	00061a80 	.word	0x00061a80

08001c04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <MX_I2C3_Init+0x54>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_I2C3_Init+0x58>)
 8001c12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C3_Init+0x50>)
 8001c42:	f001 ff25 	bl	8003a90 <HAL_I2C_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 fa30 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20004a08 	.word	0x20004a08
 8001c58:	40005c00 	.word	0x40005c00
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001c86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca6:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001ca8:	f002 ff92 	bl	8004bd0 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cb2:	f000 f9fd 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cbc:	f107 0308 	add.w	r3, r7, #8
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001cc4:	f003 f82e 	bl	8004d24 <HAL_TIM_ConfigClockSource>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cce:	f000 f9ef 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cda:	463b      	mov	r3, r7
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <MX_TIM2_Init+0x98>)
 8001ce0:	f003 fa02 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cea:	f000 f9e1 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20004a5c 	.word	0x20004a5c

08001cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_DMA_Init+0x3c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <MX_DMA_Init+0x3c>)
 8001d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_DMA_Init+0x3c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2038      	movs	r0, #56	; 0x38
 8001d24:	f001 f96f 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d28:	2038      	movs	r0, #56	; 0x38
 8001d2a:	f001 f988 	bl	800303e <HAL_NVIC_EnableIRQ>

}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a3a      	ldr	r2, [pc, #232]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a2c      	ldr	r2, [pc, #176]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <MX_GPIO_Init+0x108>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	481f      	ldr	r0, [pc, #124]	; (8001e48 <MX_GPIO_Init+0x10c>)
 8001dca:	f001 fe47 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLL_MODE0_Pin|PLL_MODE1_Pin|EN_SCK_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <MX_GPIO_Init+0x10c>)
 8001dd6:	f001 fe41 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001de0:	481a      	ldr	r0, [pc, #104]	; (8001e4c <MX_GPIO_Init+0x110>)
 8001de2:	f001 fe3b 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRST_DSP_Pin PLL_MODE0_Pin PLL_MODE1_Pin EN_SCK_Pin */
  GPIO_InitStruct.Pin = nRST_DSP_Pin|PLL_MODE0_Pin|PLL_MODE1_Pin|EN_SCK_Pin;
 8001de6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001dec:	2311      	movs	r3, #17
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4812      	ldr	r0, [pc, #72]	; (8001e48 <MX_GPIO_Init+0x10c>)
 8001e00:	f001 fca8 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSEL_Pin SR_Pin FS2_Pin FS1_Pin */
  GPIO_InitStruct.Pin = CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin;
 8001e04:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e0a:	2311      	movs	r3, #17
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480b      	ldr	r0, [pc, #44]	; (8001e4c <MX_GPIO_Init+0x110>)
 8001e1e:	f001 fc99 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin;
 8001e22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_GPIO_Init+0x114>)
 8001e38:	f001 fc8c 	bl	8003754 <HAL_GPIO_Init>

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020800 	.word	0x40020800

08001e54 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	81fb      	strh	r3, [r7, #14]
 8001e60:	460b      	mov	r3, r1
 8001e62:	81bb      	strh	r3, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 8001e68:	89ba      	ldrh	r2, [r7, #12]
 8001e6a:	89f9      	ldrh	r1, [r7, #14]
 8001e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	897b      	ldrh	r3, [r7, #10]
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8001e7e:	f001 ff4b 	bl	8003d18 <HAL_I2C_Mem_Write>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 8001e88:	701a      	strb	r2, [r3, #0]

}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20004960 	.word	0x20004960
 8001e98:	20004aa4 	.word	0x20004aa4

08001e9c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
	uint32_t j = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]


	for(i=0; i<30; i++) // For volume potentiometer
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e05d      	b.n	8001f6e <HAL_ADC_ConvCpltCallback+0xd2>
	{
		if((i == 0) && (value[ADC_POT-1] < (linear_in_table[i+1])-15))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d117      	bne.n	8001ee8 <HAL_ADC_ConvCpltCallback+0x4c>
 8001eb8:	4b77      	ldr	r3, [pc, #476]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	3201      	adds	r2, #1
 8001ec0:	4976      	ldr	r1, [pc, #472]	; (800209c <HAL_ADC_ConvCpltCallback+0x200>)
 8001ec2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ec6:	3a0f      	subs	r2, #15
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d20d      	bcs.n	8001ee8 <HAL_ADC_ConvCpltCallback+0x4c>
		{
			if(pote[ADC_POT-1] != i)
 8001ecc:	4b74      	ldr	r3, [pc, #464]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001ece:	8adb      	ldrh	r3, [r3, #22]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d047      	beq.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
			{
				pote[ADC_POT-1] = i;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001ede:	82da      	strh	r2, [r3, #22]
				flag[ADC_POT-1] = 1;
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	82da      	strh	r2, [r3, #22]
			if(pote[ADC_POT-1] != i)
 8001ee6:	e03f      	b.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
			}
		}
		else if((i > 0) && (i < 29 ) && (value[ADC_POT-1] > (linear_in_table[i]+15)) && (value[ADC_POT-1] < (linear_in_table[i+1])-15))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d023      	beq.n	8001f36 <HAL_ADC_ConvCpltCallback+0x9a>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b1c      	cmp	r3, #28
 8001ef2:	d820      	bhi.n	8001f36 <HAL_ADC_ConvCpltCallback+0x9a>
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	4968      	ldr	r1, [pc, #416]	; (800209c <HAL_ADC_ConvCpltCallback+0x200>)
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f00:	320f      	adds	r2, #15
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d917      	bls.n	8001f36 <HAL_ADC_ConvCpltCallback+0x9a>
 8001f06:	4b64      	ldr	r3, [pc, #400]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	3201      	adds	r2, #1
 8001f0e:	4963      	ldr	r1, [pc, #396]	; (800209c <HAL_ADC_ConvCpltCallback+0x200>)
 8001f10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f14:	3a0f      	subs	r2, #15
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d20d      	bcs.n	8001f36 <HAL_ADC_ConvCpltCallback+0x9a>
		{
			if(pote[ADC_POT-1] != i)
 8001f1a:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001f1c:	8adb      	ldrh	r3, [r3, #22]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d020      	beq.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
			{
				pote[ADC_POT-1] = i;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001f2c:	82da      	strh	r2, [r3, #22]
				flag[ADC_POT-1] = 1;
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	82da      	strh	r2, [r3, #22]
			if(pote[ADC_POT-1] != i)
 8001f34:	e018      	b.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
			}
		}
		else if((i == 29) && (value[ADC_POT-1] > (linear_in_table[i]+15)))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b1d      	cmp	r3, #29
 8001f3a:	d115      	bne.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	4956      	ldr	r1, [pc, #344]	; (800209c <HAL_ADC_ConvCpltCallback+0x200>)
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f48:	320f      	adds	r2, #15
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d90c      	bls.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
		{
			if(pote[ADC_POT-1] != i)
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001f50:	8adb      	ldrh	r3, [r3, #22]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d006      	beq.n	8001f68 <HAL_ADC_ConvCpltCallback+0xcc>
			{
				pote[ADC_POT-1] = i;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001f60:	82da      	strh	r2, [r3, #22]
				flag[ADC_POT-1] = 1;
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	82da      	strh	r2, [r3, #22]
	for(i=0; i<30; i++) // For volume potentiometer
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b1d      	cmp	r3, #29
 8001f72:	d99e      	bls.n	8001eb2 <HAL_ADC_ConvCpltCallback+0x16>
			}
		}
	}

	for(j=0; j<(ADC_POT-1); j++) // For filter potentiometers
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	e080      	b.n	800207c <HAL_ADC_ConvCpltCallback+0x1e0>
	{
		for(i=0; i<30; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	e077      	b.n	8002070 <HAL_ADC_ConvCpltCallback+0x1d4>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <HAL_ADC_ConvCpltCallback+0x12a>
 8001f86:	4a44      	ldr	r2, [pc, #272]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	3201      	adds	r2, #1
 8001f92:	4945      	ldr	r1, [pc, #276]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x20c>)
 8001f94:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f98:	3a0f      	subs	r2, #15
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d213      	bcs.n	8001fc6 <HAL_ADC_ConvCpltCallback+0x12a>
			{
				if(pote[j] != i)
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d05d      	beq.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
				{
					pote[j] = i;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8001fba:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8001fc4:	e051      	b.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
				}
			}
			else if((i > 0) && (i < 29 ) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02d      	beq.n	8002028 <HAL_ADC_ConvCpltCallback+0x18c>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b1c      	cmp	r3, #28
 8001fd0:	d82a      	bhi.n	8002028 <HAL_ADC_ConvCpltCallback+0x18c>
 8001fd2:	4a31      	ldr	r2, [pc, #196]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	4933      	ldr	r1, [pc, #204]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x20c>)
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001fe2:	320f      	adds	r2, #15
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d91f      	bls.n	8002028 <HAL_ADC_ConvCpltCallback+0x18c>
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	3201      	adds	r2, #1
 8001ff4:	492c      	ldr	r1, [pc, #176]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x20c>)
 8001ff6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ffa:	3a0f      	subs	r2, #15
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d213      	bcs.n	8002028 <HAL_ADC_ConvCpltCallback+0x18c>
			{
				if(pote[j] != i)
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4293      	cmp	r3, r2
 800200e:	d02c      	beq.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
				{
					pote[j] = i;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	b299      	uxth	r1, r3
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800201c:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x208>)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2101      	movs	r1, #1
 8002022:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8002026:	e020      	b.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b1d      	cmp	r3, #29
 800202c:	d11d      	bne.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	491c      	ldr	r1, [pc, #112]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x20c>)
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800203e:	320f      	adds	r2, #15
 8002040:	4293      	cmp	r3, r2
 8002042:	d912      	bls.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
			{
				if(pote[j] != i)
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800204c:	461a      	mov	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4293      	cmp	r3, r2
 8002052:	d00a      	beq.n	800206a <HAL_ADC_ConvCpltCallback+0x1ce>
				{
					pote[j] = i;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	b299      	uxth	r1, r3
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x204>)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002060:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x208>)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2101      	movs	r1, #1
 8002066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3301      	adds	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b1d      	cmp	r3, #29
 8002074:	d984      	bls.n	8001f80 <HAL_ADC_ConvCpltCallback+0xe4>
	for(j=0; j<(ADC_POT-1); j++) // For filter potentiometers
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3301      	adds	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b0a      	cmp	r3, #10
 8002080:	f67f af7b 	bls.w	8001f7a <HAL_ADC_ConvCpltCallback+0xde>
				}
			}
		}

	}
	HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8002084:	220c      	movs	r2, #12
 8002086:	4904      	ldr	r1, [pc, #16]	; (8002098 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <HAL_ADC_ConvCpltCallback+0x210>)
 800208a:	f000 fb3d 	bl	8002708 <HAL_ADC_Start_DMA>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20004aac 	.word	0x20004aac
 800209c:	20004b30 	.word	0x20004b30
 80020a0:	20004adc 	.word	0x20004adc
 80020a4:	20004b6c 	.word	0x20004b6c
 80020a8:	20004af4 	.word	0x20004af4
 80020ac:	200048b8 	.word	0x200048b8

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <Error_Handler+0x8>
	...

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_ADC_MspInit+0x144>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 808c 	bne.w	8002248 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_ADC_MspInit+0x148>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	4a46      	ldr	r2, [pc, #280]	; (8002254 <HAL_ADC_MspInit+0x148>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6453      	str	r3, [r2, #68]	; 0x44
 8002140:	4b44      	ldr	r3, [pc, #272]	; (8002254 <HAL_ADC_MspInit+0x148>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_ADC_MspInit+0x148>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <HAL_ADC_MspInit+0x148>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_ADC_MspInit+0x148>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_ADC_MspInit+0x148>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a38      	ldr	r2, [pc, #224]	; (8002254 <HAL_ADC_MspInit+0x148>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_ADC_MspInit+0x148>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_ADC_MspInit+0x148>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <HAL_ADC_MspInit+0x148>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_ADC_MspInit+0x148>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021a0:	231f      	movs	r3, #31
 80021a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a4:	2303      	movs	r3, #3
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4829      	ldr	r0, [pc, #164]	; (8002258 <HAL_ADC_MspInit+0x14c>)
 80021b4:	f001 face 	bl	8003754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021b8:	23ff      	movs	r3, #255	; 0xff
 80021ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021bc:	2303      	movs	r3, #3
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4824      	ldr	r0, [pc, #144]	; (800225c <HAL_ADC_MspInit+0x150>)
 80021cc:	f001 fac2 	bl	8003754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d0:	2303      	movs	r3, #3
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	481f      	ldr	r0, [pc, #124]	; (8002260 <HAL_ADC_MspInit+0x154>)
 80021e4:	f001 fab6 	bl	8003754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_ADC_MspInit+0x158>)
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_ADC_MspInit+0x15c>)
 80021ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_ADC_MspInit+0x158>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_ADC_MspInit+0x158>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_ADC_MspInit+0x158>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_ADC_MspInit+0x158>)
 8002202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002206:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_ADC_MspInit+0x158>)
 800220a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_ADC_MspInit+0x158>)
 8002212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002216:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_ADC_MspInit+0x158>)
 800221a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_ADC_MspInit+0x158>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_ADC_MspInit+0x158>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <HAL_ADC_MspInit+0x158>)
 800222e:	f000 ff21 	bl	8003074 <HAL_DMA_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002238:	f7ff ff3a 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_ADC_MspInit+0x158>)
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_ADC_MspInit+0x158>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3730      	adds	r7, #48	; 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40012000 	.word	0x40012000
 8002254:	40023800 	.word	0x40023800
 8002258:	40020800 	.word	0x40020800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	20004900 	.word	0x20004900
 8002268:	40026410 	.word	0x40026410

0800226c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08e      	sub	sp, #56	; 0x38
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a63      	ldr	r2, [pc, #396]	; (8002418 <HAL_I2C_MspInit+0x1ac>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12c      	bne.n	80022e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a61      	ldr	r2, [pc, #388]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ae:	2312      	movs	r3, #18
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ba:	2304      	movs	r3, #4
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4856      	ldr	r0, [pc, #344]	; (8002420 <HAL_I2C_MspInit+0x1b4>)
 80022c6:	f001 fa45 	bl	8003754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80022d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022e6:	e093      	b.n	8002410 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <HAL_I2C_MspInit+0x1b8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d13d      	bne.n	800236e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	4b49      	ldr	r3, [pc, #292]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a48      	ldr	r2, [pc, #288]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002314:	2312      	movs	r3, #18
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002320:	2304      	movs	r3, #4
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	483d      	ldr	r0, [pc, #244]	; (8002420 <HAL_I2C_MspInit+0x1b4>)
 800232c:	f001 fa12 	bl	8003754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002330:	2308      	movs	r3, #8
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002340:	2309      	movs	r3, #9
 8002342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002348:	4619      	mov	r1, r3
 800234a:	4835      	ldr	r0, [pc, #212]	; (8002420 <HAL_I2C_MspInit+0x1b4>)
 800234c:	f001 fa02 	bl	8003754 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 800235a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
}
 800236c:	e050      	b.n	8002410 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a2d      	ldr	r2, [pc, #180]	; (8002428 <HAL_I2C_MspInit+0x1bc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d14b      	bne.n	8002410 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b6:	2312      	movs	r3, #18
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023c2:	2304      	movs	r3, #4
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ca:	4619      	mov	r1, r3
 80023cc:	4817      	ldr	r0, [pc, #92]	; (800242c <HAL_I2C_MspInit+0x1c0>)
 80023ce:	f001 f9c1 	bl	8003754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d8:	2312      	movs	r3, #18
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023e4:	2304      	movs	r3, #4
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	4619      	mov	r1, r3
 80023ee:	4810      	ldr	r0, [pc, #64]	; (8002430 <HAL_I2C_MspInit+0x1c4>)
 80023f0:	f001 f9b0 	bl	8003754 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 80023fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_I2C_MspInit+0x1b0>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
}
 8002410:	bf00      	nop
 8002412:	3738      	adds	r7, #56	; 0x38
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40005400 	.word	0x40005400
 800241c:	40023800 	.word	0x40023800
 8002420:	40020400 	.word	0x40020400
 8002424:	40005800 	.word	0x40005800
 8002428:	40005c00 	.word	0x40005c00
 800242c:	40020800 	.word	0x40020800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d10d      	bne.n	8002462 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_TIM_Base_MspInit+0x3c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <HAL_TIM_Base_MspInit+0x3c>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_TIM_Base_MspInit+0x3c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <HardFault_Handler+0x4>

08002480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <MemManage_Handler+0x4>

08002486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <UsageFault_Handler+0x4>

08002492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c0:	f000 f89a 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA2_Stream0_IRQHandler+0x10>)
 80024ce:	f000 fed7 	bl	8003280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20004900 	.word	0x20004900

080024dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <SystemInit+0x20>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <SystemInit+0x20>)
 80024e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002506:	490e      	ldr	r1, [pc, #56]	; (8002540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002508:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800251c:	4c0b      	ldr	r4, [pc, #44]	; (800254c <LoopFillZerobss+0x26>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800252a:	f7ff ffd7 	bl	80024dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252e:	f002 fe57 	bl	80051e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7fe fcbf 	bl	8000eb4 <main>
  bx  lr    
 8002536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002538:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800253c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002540:	2000489c 	.word	0x2000489c
  ldr r2, =_sidata
 8002544:	08005790 	.word	0x08005790
  ldr r2, =_sbss
 8002548:	2000489c 	.word	0x2000489c
  ldr r4, =_ebss
 800254c:	20004cc4 	.word	0x20004cc4

08002550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>
	...

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_Init+0x40>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_Init+0x40>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_Init+0x40>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 fd37 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	200f      	movs	r0, #15
 8002584:	f000 f808 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7ff fd98 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_InitTick+0x58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fd4f 	bl	800305a <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 fd17 	bl	8003006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <HAL_InitTick+0x5c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20004840 	.word	0x20004840
 80025f0:	20004848 	.word	0x20004848
 80025f4:	20004844 	.word	0x20004844

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20004848 	.word	0x20004848
 800261c:	20004b88 	.word	0x20004b88

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20004b88 	.word	0x20004b88

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20004848 	.word	0x20004848

08002680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e033      	b.n	80026fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fd34 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa3e 	bl	8002b54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Start_DMA+0x1e>
 8002722:	2302      	movs	r3, #2
 8002724:	e0ce      	b.n	80028c4 <HAL_ADC_Start_DMA+0x1bc>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d018      	beq.n	800276e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800274c:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <HAL_ADC_Start_DMA+0x1c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5f      	ldr	r2, [pc, #380]	; (80028d0 <HAL_ADC_Start_DMA+0x1c8>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9a      	lsrs	r2, r3, #18
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002760:	e002      	b.n	8002768 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3b01      	subs	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f9      	bne.n	8002762 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277c:	d107      	bne.n	800278e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	f040 8086 	bne.w	80028aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027dc:	d106      	bne.n	80027ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f023 0206 	bic.w	r2, r3, #6
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fa:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_ADC_Start_DMA+0x1cc>)
 80027fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4a35      	ldr	r2, [pc, #212]	; (80028d8 <HAL_ADC_Start_DMA+0x1d0>)
 8002804:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_ADC_Start_DMA+0x1d4>)
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_ADC_Start_DMA+0x1d8>)
 8002814:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800281e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800282e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	334c      	adds	r3, #76	; 0x4c
 800284a:	4619      	mov	r1, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f000 fcbe 	bl	80031d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d129      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	e020      	b.n	80028c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_Start_DMA+0x1dc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d11b      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x1ba>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d114      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e00b      	b.n	80028c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20004840 	.word	0x20004840
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	40012300 	.word	0x40012300
 80028d8:	08002d4d 	.word	0x08002d4d
 80028dc:	08002e07 	.word	0x08002e07
 80028e0:	08002e23 	.word	0x08002e23
 80028e4:	40012000 	.word	0x40012000

080028e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1c>
 8002928:	2302      	movs	r3, #2
 800292a:	e105      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x228>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b09      	cmp	r3, #9
 800293a:	d925      	bls.n	8002988 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68d9      	ldr	r1, [r3, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	3b1e      	subs	r3, #30
 8002952:	2207      	movs	r2, #7
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43da      	mvns	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	400a      	ands	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68d9      	ldr	r1, [r3, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	4603      	mov	r3, r0
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4403      	add	r3, r0
 800297a:	3b1e      	subs	r3, #30
 800297c:	409a      	lsls	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	e022      	b.n	80029ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	2207      	movs	r2, #7
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	400a      	ands	r2, r1
 80029aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6919      	ldr	r1, [r3, #16]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4403      	add	r3, r0
 80029c4:	409a      	lsls	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d824      	bhi.n	8002a20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b05      	subs	r3, #5
 80029e8:	221f      	movs	r2, #31
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	400a      	ands	r2, r1
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b05      	subs	r3, #5
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	e04c      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d824      	bhi.n	8002a72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b23      	subs	r3, #35	; 0x23
 8002a3a:	221f      	movs	r2, #31
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43da      	mvns	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b23      	subs	r3, #35	; 0x23
 8002a64:	fa00 f203 	lsl.w	r2, r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a70:	e023      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b41      	subs	r3, #65	; 0x41
 8002a84:	221f      	movs	r2, #31
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b41      	subs	r3, #65	; 0x41
 8002aae:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_ADC_ConfigChannel+0x234>)
 8002abc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <HAL_ADC_ConfigChannel+0x238>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d109      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1cc>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d105      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_ADC_ConfigChannel+0x238>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d123      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x21e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d003      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x1e6>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b11      	cmp	r3, #17
 8002af4:	d11b      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d111      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_ADC_ConfigChannel+0x23c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <HAL_ADC_ConfigChannel+0x240>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0c9a      	lsrs	r2, r3, #18
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40012300 	.word	0x40012300
 8002b48:	40012000 	.word	0x40012000
 8002b4c:	20004840 	.word	0x20004840
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b5c:	4b79      	ldr	r3, [pc, #484]	; (8002d44 <ADC_Init+0x1f0>)
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	021a      	lsls	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6899      	ldr	r1, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	4a58      	ldr	r2, [pc, #352]	; (8002d48 <ADC_Init+0x1f4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e00f      	b.n	8002c52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0202 	bic.w	r2, r2, #2
 8002c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e1b      	ldrb	r3, [r3, #24]
 8002c6c:	005a      	lsls	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01b      	beq.n	8002cb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	3b01      	subs	r3, #1
 8002cac:	035a      	lsls	r2, r3, #13
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e007      	b.n	8002cc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	051a      	lsls	r2, r3, #20
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d0a:	025a      	lsls	r2, r3, #9
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	029a      	lsls	r2, r3, #10
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40012300 	.word	0x40012300
 8002d48:	0f000001 	.word	0x0f000001

08002d4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d13c      	bne.n	8002de0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d12b      	bne.n	8002dd8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d127      	bne.n	8002dd8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d119      	bne.n	8002dd8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0220 	bic.w	r2, r2, #32
 8002db2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff f85f 	bl	8001e9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dde:	e00e      	b.n	8002dfe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fd85 	bl	80028fc <HAL_ADC_ErrorCallback>
}
 8002df2:	e004      	b.n	8002dfe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff fd67 	bl	80028e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff fd5a 	bl	80028fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff29 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff3e 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff31 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffa2 	bl	8002fac <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff face 	bl	8002620 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e099      	b.n	80031c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b0:	e00f      	b.n	80030d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b2:	f7ff fab5 	bl	8002620 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d908      	bls.n	80030d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e078      	b.n	80031c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e8      	bne.n	80030b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_DMA_Init+0x158>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b04      	cmp	r3, #4
 800312a:	d107      	bne.n	800313c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	4313      	orrs	r3, r2
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b04      	cmp	r3, #4
 8003164:	d117      	bne.n	8003196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa6f 	bl	800365c <DMA_CheckFifoParam>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003192:	2301      	movs	r3, #1
 8003194:	e016      	b.n	80031c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa26 	bl	80035f0 <DMA_CalcBaseAndBitshift>
 80031a4:	4603      	mov	r3, r0
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	223f      	movs	r2, #63	; 0x3f
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	f010803f 	.word	0xf010803f

080031d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_DMA_Start_IT+0x26>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e040      	b.n	8003278 <HAL_DMA_Start_IT+0xa8>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d12f      	bne.n	800326a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9b8 	bl	8003594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	223f      	movs	r2, #63	; 0x3f
 800322a:	409a      	lsls	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0216 	orr.w	r2, r2, #22
 800323e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e005      	b.n	8003276 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800328c:	4b8e      	ldr	r3, [pc, #568]	; (80034c8 <HAL_DMA_IRQHandler+0x248>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a8e      	ldr	r2, [pc, #568]	; (80034cc <HAL_DMA_IRQHandler+0x24c>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2208      	movs	r2, #8
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01a      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2208      	movs	r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2204      	movs	r2, #4
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2204      	movs	r2, #4
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2210      	movs	r2, #16
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d043      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03c      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2210      	movs	r2, #16
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d024      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e01f      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e016      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2220      	movs	r2, #32
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 808f 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8087 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2220      	movs	r2, #32
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b05      	cmp	r3, #5
 8003428:	d136      	bne.n	8003498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0216 	bic.w	r2, r2, #22
 8003438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <HAL_DMA_IRQHandler+0x1da>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0208 	bic.w	r2, r2, #8
 8003468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	223f      	movs	r2, #63	; 0x3f
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07e      	beq.n	800358c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
        }
        return;
 8003496:	e079      	b.n	800358c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e02c      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
 80034c6:	bf00      	nop
 80034c8:	20004840 	.word	0x20004840
 80034cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d023      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e01e      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	2b00      	cmp	r3, #0
 8003526:	d032      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d022      	beq.n	800357a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	d307      	bcc.n	8003568 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f2      	bne.n	800354c <HAL_DMA_IRQHandler+0x2cc>
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003568:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e000      	b.n	800358e <HAL_DMA_IRQHandler+0x30e>
        return;
 800358c:	bf00      	nop
    }
  }
}
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d108      	bne.n	80035d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035d2:	e007      	b.n	80035e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b10      	subs	r3, #16
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <DMA_CalcBaseAndBitshift+0x64>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <DMA_CalcBaseAndBitshift+0x68>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d909      	bls.n	8003632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	; 0x58
 8003630:	e007      	b.n	8003642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	aaaaaaab 	.word	0xaaaaaaab
 8003658:	08005774 	.word	0x08005774

0800365c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11f      	bne.n	80036b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d856      	bhi.n	800372a <DMA_CheckFifoParam+0xce>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <DMA_CheckFifoParam+0x28>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036a7 	.word	0x080036a7
 800368c:	08003695 	.word	0x08003695
 8003690:	0800372b 	.word	0x0800372b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d046      	beq.n	800372e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e043      	b.n	800372e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ae:	d140      	bne.n	8003732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e03d      	b.n	8003732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	d121      	bne.n	8003704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d837      	bhi.n	8003736 <DMA_CheckFifoParam+0xda>
 80036c6:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DMA_CheckFifoParam+0x70>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036e3 	.word	0x080036e3
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	080036f5 	.word	0x080036f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e030      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d025      	beq.n	800373a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f2:	e022      	b.n	800373a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003702:	e01c      	b.n	800373e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d903      	bls.n	8003712 <DMA_CheckFifoParam+0xb6>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d003      	beq.n	8003718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003710:	e018      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      break;
 8003716:	e015      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e00b      	b.n	8003742 <DMA_CheckFifoParam+0xe6>
      break;
 800372a:	bf00      	nop
 800372c:	e00a      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e008      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e006      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;   
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
    }
  } 
  
  return status; 
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e159      	b.n	8003a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	f040 8148 	bne.w	8003a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d005      	beq.n	80037a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d130      	bne.n	8003808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a2 	beq.w	8003a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b57      	ldr	r3, [pc, #348]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	4a56      	ldr	r2, [pc, #344]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f6:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x2ec>)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d019      	beq.n	8003956 <HAL_GPIO_Init+0x202>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a48      	ldr	r2, [pc, #288]	; (8003a48 <HAL_GPIO_Init+0x2f4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_GPIO_Init+0x1fe>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <HAL_GPIO_Init+0x2f8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00d      	beq.n	800394e <HAL_GPIO_Init+0x1fa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a46      	ldr	r2, [pc, #280]	; (8003a50 <HAL_GPIO_Init+0x2fc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <HAL_GPIO_Init+0x1f6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a45      	ldr	r2, [pc, #276]	; (8003a54 <HAL_GPIO_Init+0x300>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_GPIO_Init+0x1f2>
 8003942:	2304      	movs	r3, #4
 8003944:	e008      	b.n	8003958 <HAL_GPIO_Init+0x204>
 8003946:	2307      	movs	r3, #7
 8003948:	e006      	b.n	8003958 <HAL_GPIO_Init+0x204>
 800394a:	2303      	movs	r3, #3
 800394c:	e004      	b.n	8003958 <HAL_GPIO_Init+0x204>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_Init+0x204>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_Init+0x204>
 8003956:	2300      	movs	r3, #0
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	f002 0203 	and.w	r2, r2, #3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003968:	4935      	ldr	r1, [pc, #212]	; (8003a40 <HAL_GPIO_Init+0x2ec>)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	3302      	adds	r3, #2
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <HAL_GPIO_Init+0x304>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f4:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a18:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3301      	adds	r3, #1
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b0f      	cmp	r3, #15
 8003a28:	f67f aea2 	bls.w	8003770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40013800 	.word	0x40013800
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020c00 	.word	0x40020c00
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a78:	e003      	b.n	8003a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	041a      	lsls	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	619a      	str	r2, [r3, #24]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e12b      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe fbd8 	bl	800226c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af4:	f001 f858 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a81      	ldr	r2, [pc, #516]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d807      	bhi.n	8003b14 <HAL_I2C_Init+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a80      	ldr	r2, [pc, #512]	; (8003d08 <HAL_I2C_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e006      	b.n	8003b22 <HAL_I2C_Init+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <HAL_I2C_Init+0x27c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0e7      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a78      	ldr	r2, [pc, #480]	; (8003d10 <HAL_I2C_Init+0x280>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0c9b      	lsrs	r3, r3, #18
 8003b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <HAL_I2C_Init+0xd4>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e009      	b.n	8003b78 <HAL_I2C_Init+0xe8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a69      	ldr	r2, [pc, #420]	; (8003d14 <HAL_I2C_Init+0x284>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	495c      	ldr	r1, [pc, #368]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d819      	bhi.n	8003bcc <HAL_I2C_Init+0x13c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bac:	400b      	ands	r3, r1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_I2C_Init+0x138>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e59      	subs	r1, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	e051      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e04f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_I2C_Init+0x168>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e012      	b.n	8003c1e <HAL_I2C_Init+0x18e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x196>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_I2C_Init+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e58      	subs	r0, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6911      	ldr	r1, [r2, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	000186a0 	.word	0x000186a0
 8003d08:	001e847f 	.word	0x001e847f
 8003d0c:	003d08ff 	.word	0x003d08ff
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d32:	f7fe fc75 	bl	8002620 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 80d9 	bne.w	8003ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	496d      	ldr	r1, [pc, #436]	; (8003f04 <HAL_I2C_Mem_Write+0x1ec>)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f971 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e0cc      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Mem_Write+0x56>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0c5      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2221      	movs	r2, #33	; 0x21
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a4d      	ldr	r2, [pc, #308]	; (8003f08 <HAL_I2C_Mem_Write+0x1f0>)
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd6:	88f8      	ldrh	r0, [r7, #6]
 8003dd8:	893a      	ldrh	r2, [r7, #8]
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4603      	mov	r3, r0
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f890 	bl	8003f0c <I2C_RequestMemoryWrite>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d052      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e081      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f9f2 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11b      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x180>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1aa      	bne.n	8003df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f9de 	bl	8004266 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d107      	bne.n	8003ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e016      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	00100002 	.word	0x00100002
 8003f08:	ffff0000 	.word	0xffff0000

08003f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f878 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5c:	d103      	bne.n	8003f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e05f      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6a:	897b      	ldrh	r3, [r7, #10]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	492d      	ldr	r1, [pc, #180]	; (8004034 <I2C_RequestMemoryWrite+0x128>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f8b0 	bl	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e04c      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f91a 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e02b      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd8:	893b      	ldrh	r3, [r7, #8]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	e021      	b.n	8004028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff4:	6a39      	ldr	r1, [r7, #32]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8f4 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b04      	cmp	r3, #4
 8004008:	d107      	bne.n	800401a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e005      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00010002 	.word	0x00010002

08004038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004048:	e025      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d021      	beq.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fe fae5 	bl	8002620 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d116      	bne.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e023      	b.n	80040de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10d      	bne.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	e00c      	b.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4013      	ands	r3, r2
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d0b6      	beq.n	800404a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040f4:	e051      	b.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d123      	bne.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004114:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800411e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e046      	b.n	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d021      	beq.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004156:	f7fe fa63 	bl	8002620 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d302      	bcc.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d116      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e020      	b.n	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10c      	bne.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e00b      	b.n	80041d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d18d      	bne.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f0:	e02d      	b.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f878 	bl	80042e8 <I2C_IsAcknowledgeFailed>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e02d      	b.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d021      	beq.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fe fa09 	bl	8002620 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d116      	bne.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e007      	b.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d1ca      	bne.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004272:	e02d      	b.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f837 	bl	80042e8 <I2C_IsAcknowledgeFailed>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e02d      	b.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d021      	beq.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428c:	f7fe f9c8 	bl	8002620 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e007      	b.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d1ca      	bne.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d11b      	bne.n	8004338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0204 	orr.w	r2, r3, #4
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e267      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d075      	beq.n	8004452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004366:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00c      	beq.n	800438c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4b85      	ldr	r3, [pc, #532]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d112      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437e:	4b82      	ldr	r3, [pc, #520]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b7e      	ldr	r3, [pc, #504]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05b      	beq.n	8004450 <HAL_RCC_OscConfig+0x108>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d157      	bne.n	8004450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e242      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x74>
 80043ae:	4b76      	ldr	r3, [pc, #472]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a75      	ldr	r2, [pc, #468]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01d      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x98>
 80043c6:	4b70      	ldr	r3, [pc, #448]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6f      	ldr	r2, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b6d      	ldr	r3, [pc, #436]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6c      	ldr	r2, [pc, #432]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043e0:	4b69      	ldr	r3, [pc, #420]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a68      	ldr	r2, [pc, #416]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b66      	ldr	r3, [pc, #408]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a65      	ldr	r2, [pc, #404]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe f90e 	bl	8002620 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004408:	f7fe f90a 	bl	8002620 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e207      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0xc0>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe f8fa 	bl	8002620 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fe f8f6 	bl	8002620 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e1f3      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0xe8>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d063      	beq.n	8004526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445e:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004472:	2b08      	cmp	r3, #8
 8004474:	d11c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d116      	bne.n	80044b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x152>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e1c7      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4937      	ldr	r1, [pc, #220]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	e03a      	b.n	8004526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_OscConfig+0x244>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe f8af 	bl	8002620 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c6:	f7fe f8ab 	bl	8002620 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1a8      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b28      	ldr	r3, [pc, #160]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4925      	ldr	r1, [pc, #148]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x244>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe f88e 	bl	8002620 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004508:	f7fe f88a 	bl	8002620 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e187      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d036      	beq.n	80045a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <HAL_RCC_OscConfig+0x248>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fe f86e 	bl	8002620 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004548:	f7fe f86a 	bl	8002620 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e167      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_OscConfig+0x240>)
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x200>
 8004566:	e01b      	b.n	80045a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_OscConfig+0x248>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456e:	f7fe f857 	bl	8002620 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	e00e      	b.n	8004594 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004576:	f7fe f853 	bl	8002620 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d907      	bls.n	8004594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e150      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
 8004588:	40023800 	.word	0x40023800
 800458c:	42470000 	.word	0x42470000
 8004590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	4b88      	ldr	r3, [pc, #544]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ea      	bne.n	8004576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8097 	beq.w	80046dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b2:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	4b7d      	ldr	r3, [pc, #500]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	4a7c      	ldr	r2, [pc, #496]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6413      	str	r3, [r2, #64]	; 0x40
 80045ce:	4b7a      	ldr	r3, [pc, #488]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b77      	ldr	r3, [pc, #476]	; (80047bc <HAL_RCC_OscConfig+0x474>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ea:	4b74      	ldr	r3, [pc, #464]	; (80047bc <HAL_RCC_OscConfig+0x474>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a73      	ldr	r2, [pc, #460]	; (80047bc <HAL_RCC_OscConfig+0x474>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fe f813 	bl	8002620 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fe f80f 	bl	8002620 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e10c      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	4b6a      	ldr	r3, [pc, #424]	; (80047bc <HAL_RCC_OscConfig+0x474>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x2ea>
 8004624:	4b64      	ldr	r3, [pc, #400]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a63      	ldr	r2, [pc, #396]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	e01c      	b.n	800466c <HAL_RCC_OscConfig+0x324>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0x30c>
 800463a:	4b5f      	ldr	r3, [pc, #380]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a5e      	ldr	r2, [pc, #376]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004640:	f043 0304 	orr.w	r3, r3, #4
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	4b5c      	ldr	r3, [pc, #368]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a5b      	ldr	r2, [pc, #364]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
 8004652:	e00b      	b.n	800466c <HAL_RCC_OscConfig+0x324>
 8004654:	4b58      	ldr	r3, [pc, #352]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a57      	ldr	r2, [pc, #348]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
 8004660:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a54      	ldr	r2, [pc, #336]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004666:	f023 0304 	bic.w	r3, r3, #4
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d015      	beq.n	80046a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fd ffd4 	bl	8002620 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fd ffd0 	bl	8002620 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0cb      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	4b49      	ldr	r3, [pc, #292]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ee      	beq.n	800467c <HAL_RCC_OscConfig+0x334>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a0:	f7fd ffbe 	bl	8002620 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fd ffba 	bl	8002620 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0b5      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ee      	bne.n	80046a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d0:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	4a38      	ldr	r2, [pc, #224]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80a1 	beq.w	8004828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d05c      	beq.n	80047ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d141      	bne.n	800477e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_RCC_OscConfig+0x478>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fd ff8e 	bl	8002620 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004708:	f7fd ff8a 	bl	8002620 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e087      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	491b      	ldr	r1, [pc, #108]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x478>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fd ff63 	bl	8002620 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475e:	f7fd ff5f 	bl	8002620 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e05c      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x416>
 800477c:	e054      	b.n	8004828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0x478>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd ff4c 	bl	8002620 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd ff48 	bl	8002620 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e045      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_RCC_OscConfig+0x470>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x444>
 80047aa:	e03d      	b.n	8004828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e038      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
 80047c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_RCC_OscConfig+0x4ec>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d028      	beq.n	8004824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d121      	bne.n	8004824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d11a      	bne.n	8004824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d111      	bne.n	8004824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	3b01      	subs	r3, #1
 800480e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800

08004838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0cc      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800484c:	4b68      	ldr	r3, [pc, #416]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d90c      	bls.n	8004874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b63      	ldr	r3, [pc, #396]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0b8      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d020      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800488c:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a52      	ldr	r2, [pc, #328]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b0:	4b50      	ldr	r3, [pc, #320]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	494d      	ldr	r1, [pc, #308]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d044      	beq.n	8004958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d119      	bne.n	8004916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f6:	4b3f      	ldr	r3, [pc, #252]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e06f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e067      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004916:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4934      	ldr	r1, [pc, #208]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004928:	f7fd fe7a 	bl	8002620 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fd fe76 	bl	8002620 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e04f      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 020c 	and.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	429a      	cmp	r2, r3
 8004956:	d1eb      	bne.n	8004930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004958:	4b25      	ldr	r3, [pc, #148]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d20c      	bcs.n	8004980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e032      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4916      	ldr	r1, [pc, #88]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	490e      	ldr	r1, [pc, #56]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049be:	f000 f821 	bl	8004a04 <HAL_RCC_GetSysClockFreq>
 80049c2:	4602      	mov	r2, r0
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	490a      	ldr	r1, [pc, #40]	; (80049f8 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	5ccb      	ldrb	r3, [r1, r3]
 80049d2:	fa22 f303 	lsr.w	r3, r2, r3
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd fdda 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023c00 	.word	0x40023c00
 80049f4:	40023800 	.word	0x40023800
 80049f8:	0800575c 	.word	0x0800575c
 80049fc:	20004840 	.word	0x20004840
 8004a00:	20004844 	.word	0x20004844

08004a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b090      	sub	sp, #64	; 0x40
 8004a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a10:	2300      	movs	r3, #0
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a14:	2300      	movs	r3, #0
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d00d      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x40>
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	f200 80a1 	bhi.w	8004b70 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x34>
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a36:	e09b      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a38:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a3c:	e09b      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a42:	e098      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a44:	4b4f      	ldr	r3, [pc, #316]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a4e:	4b4d      	ldr	r3, [pc, #308]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d028      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5a:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	2200      	movs	r2, #0
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	627a      	str	r2, [r7, #36]	; 0x24
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a70:	fb03 f201 	mul.w	r2, r3, r1
 8004a74:	2300      	movs	r3, #0
 8004a76:	fb00 f303 	mul.w	r3, r0, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4a43      	ldr	r2, [pc, #268]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a7e:	fba0 1202 	umull	r1, r2, r0, r2
 8004a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a84:	460a      	mov	r2, r1
 8004a86:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8a:	4413      	add	r3, r2
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	2200      	movs	r2, #0
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	61fa      	str	r2, [r7, #28]
 8004a96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a9e:	f7fc f827 	bl	8000af0 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aaa:	e053      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	617a      	str	r2, [r7, #20]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004abe:	f04f 0b00 	mov.w	fp, #0
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	f04f 0000 	mov.w	r0, #0
 8004aca:	f04f 0100 	mov.w	r1, #0
 8004ace:	0159      	lsls	r1, r3, #5
 8004ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad4:	0150      	lsls	r0, r2, #5
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	ebb2 080a 	subs.w	r8, r2, sl
 8004ade:	eb63 090b 	sbc.w	r9, r3, fp
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004af2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004af6:	ebb2 0408 	subs.w	r4, r2, r8
 8004afa:	eb63 0509 	sbc.w	r5, r3, r9
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	00eb      	lsls	r3, r5, #3
 8004b08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b0c:	00e2      	lsls	r2, r4, #3
 8004b0e:	4614      	mov	r4, r2
 8004b10:	461d      	mov	r5, r3
 8004b12:	eb14 030a 	adds.w	r3, r4, sl
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	eb45 030b 	adc.w	r3, r5, fp
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	028b      	lsls	r3, r1, #10
 8004b2e:	4621      	mov	r1, r4
 8004b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b34:	4621      	mov	r1, r4
 8004b36:	028a      	lsls	r2, r1, #10
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	2200      	movs	r2, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	60fa      	str	r2, [r7, #12]
 8004b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b48:	f7fb ffd2 	bl	8000af0 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	3301      	adds	r3, #1
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3740      	adds	r7, #64	; 0x40
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	019bfcc0 	.word	0x019bfcc0

08004b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20004840 	.word	0x20004840

08004ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bac:	f7ff fff0 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0a9b      	lsrs	r3, r3, #10
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800576c 	.word	0x0800576c

08004bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e041      	b.n	8004c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fd fc1c 	bl	8002434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f000 f950 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e03c      	b.n	8004d02 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <HAL_TIM_Base_Start+0xa0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIM_Base_Start+0x5c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIM_Base_Start+0x5c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_TIM_Base_Start+0xa4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_Base_Start+0x5c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_TIM_Base_Start+0xa8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_Base_Start+0x5c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_TIM_Base_Start+0xac>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_Base_Start+0x5c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <HAL_TIM_Base_Start+0xb0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d111      	bne.n	8004cf0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d010      	beq.n	8004d00 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e007      	b.n	8004d00 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40014000 	.word	0x40014000

08004d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_ConfigClockSource+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e0b4      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x186>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d78:	d03e      	beq.n	8004df8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	f200 8087 	bhi.w	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	f000 8086 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x172>
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	d87f      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b70      	cmp	r3, #112	; 0x70
 8004d92:	d01a      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0xa6>
 8004d94:	2b70      	cmp	r3, #112	; 0x70
 8004d96:	d87b      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b60      	cmp	r3, #96	; 0x60
 8004d9a:	d050      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x11a>
 8004d9c:	2b60      	cmp	r3, #96	; 0x60
 8004d9e:	d877      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b50      	cmp	r3, #80	; 0x50
 8004da2:	d03c      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xfa>
 8004da4:	2b50      	cmp	r3, #80	; 0x50
 8004da6:	d873      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d058      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x13a>
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d86f      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b30      	cmp	r3, #48	; 0x30
 8004db2:	d064      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	2b30      	cmp	r3, #48	; 0x30
 8004db6:	d86b      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d060      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d867      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05c      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d05a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	e062      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f000 f965 	bl	80050a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	609a      	str	r2, [r3, #8]
      break;
 8004df6:	e04f      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f000 f94e 	bl	80050a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e1a:	609a      	str	r2, [r3, #8]
      break;
 8004e1c:	e03c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 f8c2 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2150      	movs	r1, #80	; 0x50
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f91b 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e02c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 f8e1 	bl	8005012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2160      	movs	r1, #96	; 0x60
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f90b 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e01c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 f8a2 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2140      	movs	r1, #64	; 0x40
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f8fb 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e00c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f000 f8f2 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e8e:	e003      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	e000      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <TIM_Base_SetConfig+0xe4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a31      	ldr	r2, [pc, #196]	; (8004f9c <TIM_Base_SetConfig+0xe8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <TIM_Base_SetConfig+0xec>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2f      	ldr	r2, [pc, #188]	; (8004fa4 <TIM_Base_SetConfig+0xf0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d108      	bne.n	8004efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <TIM_Base_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01b      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d017      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <TIM_Base_SetConfig+0xe8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_Base_SetConfig+0xec>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <TIM_Base_SetConfig+0xf0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <TIM_Base_SetConfig+0xf4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <TIM_Base_SetConfig+0xf8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <TIM_Base_SetConfig+0xfc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <TIM_Base_SetConfig+0xe4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d103      	bne.n	8004f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	615a      	str	r2, [r3, #20]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40014400 	.word	0x40014400
 8004fb0:	40014800 	.word	0x40014800

08004fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 030a 	bic.w	r3, r3, #10
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0210 	bic.w	r2, r3, #16
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800503c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	f043 0307 	orr.w	r3, r3, #7
 8005094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e050      	b.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d013      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a15      	ldr	r2, [pc, #84]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10c      	bne.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40014000 	.word	0x40014000

080051c4 <memset>:
 80051c4:	4402      	add	r2, r0
 80051c6:	4603      	mov	r3, r0
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d100      	bne.n	80051ce <memset+0xa>
 80051cc:	4770      	bx	lr
 80051ce:	f803 1b01 	strb.w	r1, [r3], #1
 80051d2:	e7f9      	b.n	80051c8 <memset+0x4>

080051d4 <__errno>:
 80051d4:	4b01      	ldr	r3, [pc, #4]	; (80051dc <__errno+0x8>)
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20004898 	.word	0x20004898

080051e0 <__libc_init_array>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	4d0d      	ldr	r5, [pc, #52]	; (8005218 <__libc_init_array+0x38>)
 80051e4:	4c0d      	ldr	r4, [pc, #52]	; (800521c <__libc_init_array+0x3c>)
 80051e6:	1b64      	subs	r4, r4, r5
 80051e8:	10a4      	asrs	r4, r4, #2
 80051ea:	2600      	movs	r6, #0
 80051ec:	42a6      	cmp	r6, r4
 80051ee:	d109      	bne.n	8005204 <__libc_init_array+0x24>
 80051f0:	4d0b      	ldr	r5, [pc, #44]	; (8005220 <__libc_init_array+0x40>)
 80051f2:	4c0c      	ldr	r4, [pc, #48]	; (8005224 <__libc_init_array+0x44>)
 80051f4:	f000 faa6 	bl	8005744 <_init>
 80051f8:	1b64      	subs	r4, r4, r5
 80051fa:	10a4      	asrs	r4, r4, #2
 80051fc:	2600      	movs	r6, #0
 80051fe:	42a6      	cmp	r6, r4
 8005200:	d105      	bne.n	800520e <__libc_init_array+0x2e>
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	f855 3b04 	ldr.w	r3, [r5], #4
 8005208:	4798      	blx	r3
 800520a:	3601      	adds	r6, #1
 800520c:	e7ee      	b.n	80051ec <__libc_init_array+0xc>
 800520e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005212:	4798      	blx	r3
 8005214:	3601      	adds	r6, #1
 8005216:	e7f2      	b.n	80051fe <__libc_init_array+0x1e>
 8005218:	08005788 	.word	0x08005788
 800521c:	08005788 	.word	0x08005788
 8005220:	08005788 	.word	0x08005788
 8005224:	0800578c 	.word	0x0800578c

08005228 <log10>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	ed2d 8b02 	vpush	{d8}
 800522e:	ec55 4b10 	vmov	r4, r5, d0
 8005232:	f000 f841 	bl	80052b8 <__ieee754_log10>
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	eeb0 8a40 	vmov.f32	s16, s0
 8005242:	eef0 8a60 	vmov.f32	s17, s1
 8005246:	f7fb fc1d 	bl	8000a84 <__aeabi_dcmpun>
 800524a:	b998      	cbnz	r0, 8005274 <log10+0x4c>
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f7fb fbf8 	bl	8000a48 <__aeabi_dcmple>
 8005258:	b160      	cbz	r0, 8005274 <log10+0x4c>
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	4620      	mov	r0, r4
 8005260:	4629      	mov	r1, r5
 8005262:	f7fb fbdd 	bl	8000a20 <__aeabi_dcmpeq>
 8005266:	b160      	cbz	r0, 8005282 <log10+0x5a>
 8005268:	f7ff ffb4 	bl	80051d4 <__errno>
 800526c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005298 <log10+0x70>
 8005270:	2322      	movs	r3, #34	; 0x22
 8005272:	6003      	str	r3, [r0, #0]
 8005274:	eeb0 0a48 	vmov.f32	s0, s16
 8005278:	eef0 0a68 	vmov.f32	s1, s17
 800527c:	ecbd 8b02 	vpop	{d8}
 8005280:	bd38      	pop	{r3, r4, r5, pc}
 8005282:	f7ff ffa7 	bl	80051d4 <__errno>
 8005286:	ecbd 8b02 	vpop	{d8}
 800528a:	2321      	movs	r3, #33	; 0x21
 800528c:	6003      	str	r3, [r0, #0]
 800528e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005292:	4803      	ldr	r0, [pc, #12]	; (80052a0 <log10+0x78>)
 8005294:	f000 b808 	b.w	80052a8 <nan>
 8005298:	00000000 	.word	0x00000000
 800529c:	fff00000 	.word	0xfff00000
 80052a0:	0800577c 	.word	0x0800577c
 80052a4:	00000000 	.word	0x00000000

080052a8 <nan>:
 80052a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80052b0 <nan+0x8>
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	00000000 	.word	0x00000000
 80052b4:	7ff80000 	.word	0x7ff80000

080052b8 <__ieee754_log10>:
 80052b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	ec55 4b10 	vmov	r4, r5, d0
 80052c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80052c4:	462b      	mov	r3, r5
 80052c6:	da2f      	bge.n	8005328 <__ieee754_log10+0x70>
 80052c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80052cc:	4322      	orrs	r2, r4
 80052ce:	d109      	bne.n	80052e4 <__ieee754_log10+0x2c>
 80052d0:	493b      	ldr	r1, [pc, #236]	; (80053c0 <__ieee754_log10+0x108>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	2300      	movs	r3, #0
 80052d6:	2000      	movs	r0, #0
 80052d8:	f7fb fa64 	bl	80007a4 <__aeabi_ddiv>
 80052dc:	ec41 0b10 	vmov	d0, r0, r1
 80052e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e4:	2d00      	cmp	r5, #0
 80052e6:	da09      	bge.n	80052fc <__ieee754_log10+0x44>
 80052e8:	ee10 2a10 	vmov	r2, s0
 80052ec:	ee10 0a10 	vmov	r0, s0
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fa ff75 	bl	80001e0 <__aeabi_dsub>
 80052f6:	2200      	movs	r2, #0
 80052f8:	2300      	movs	r3, #0
 80052fa:	e7ed      	b.n	80052d8 <__ieee754_log10+0x20>
 80052fc:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <__ieee754_log10+0x10c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	4629      	mov	r1, r5
 8005302:	ee10 0a10 	vmov	r0, s0
 8005306:	f7fb f923 	bl	8000550 <__aeabi_dmul>
 800530a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800530e:	4604      	mov	r4, r0
 8005310:	460d      	mov	r5, r1
 8005312:	460b      	mov	r3, r1
 8005314:	492c      	ldr	r1, [pc, #176]	; (80053c8 <__ieee754_log10+0x110>)
 8005316:	428b      	cmp	r3, r1
 8005318:	dd08      	ble.n	800532c <__ieee754_log10+0x74>
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f7fa ff5f 	bl	80001e4 <__adddf3>
 8005326:	e7d9      	b.n	80052dc <__ieee754_log10+0x24>
 8005328:	2200      	movs	r2, #0
 800532a:	e7f3      	b.n	8005314 <__ieee754_log10+0x5c>
 800532c:	1518      	asrs	r0, r3, #20
 800532e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005332:	4410      	add	r0, r2
 8005334:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005338:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800533c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005340:	f7fb f89c 	bl	800047c <__aeabi_i2d>
 8005344:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005348:	3303      	adds	r3, #3
 800534a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800534e:	ec45 4b10 	vmov	d0, r4, r5
 8005352:	4606      	mov	r6, r0
 8005354:	460f      	mov	r7, r1
 8005356:	f000 f83b 	bl	80053d0 <__ieee754_log>
 800535a:	a313      	add	r3, pc, #76	; (adr r3, 80053a8 <__ieee754_log10+0xf0>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	4630      	mov	r0, r6
 8005362:	4639      	mov	r1, r7
 8005364:	ec59 8b10 	vmov	r8, r9, d0
 8005368:	f7fb f8f2 	bl	8000550 <__aeabi_dmul>
 800536c:	a310      	add	r3, pc, #64	; (adr r3, 80053b0 <__ieee754_log10+0xf8>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	4604      	mov	r4, r0
 8005374:	460d      	mov	r5, r1
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fb f8e9 	bl	8000550 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fa ff2d 	bl	80001e4 <__adddf3>
 800538a:	a30b      	add	r3, pc, #44	; (adr r3, 80053b8 <__ieee754_log10+0x100>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	4604      	mov	r4, r0
 8005392:	460d      	mov	r5, r1
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb f8da 	bl	8000550 <__aeabi_dmul>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	e7bd      	b.n	8005322 <__ieee754_log10+0x6a>
 80053a6:	bf00      	nop
 80053a8:	11f12b36 	.word	0x11f12b36
 80053ac:	3d59fef3 	.word	0x3d59fef3
 80053b0:	1526e50e 	.word	0x1526e50e
 80053b4:	3fdbcb7b 	.word	0x3fdbcb7b
 80053b8:	509f6000 	.word	0x509f6000
 80053bc:	3fd34413 	.word	0x3fd34413
 80053c0:	c3500000 	.word	0xc3500000
 80053c4:	43500000 	.word	0x43500000
 80053c8:	7fefffff 	.word	0x7fefffff
 80053cc:	00000000 	.word	0x00000000

080053d0 <__ieee754_log>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	ec51 0b10 	vmov	r0, r1, d0
 80053d8:	ed2d 8b04 	vpush	{d8-d9}
 80053dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80053e0:	b083      	sub	sp, #12
 80053e2:	460d      	mov	r5, r1
 80053e4:	da29      	bge.n	800543a <__ieee754_log+0x6a>
 80053e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053ea:	4303      	orrs	r3, r0
 80053ec:	ee10 2a10 	vmov	r2, s0
 80053f0:	d10c      	bne.n	800540c <__ieee754_log+0x3c>
 80053f2:	49cf      	ldr	r1, [pc, #828]	; (8005730 <__ieee754_log+0x360>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	2300      	movs	r3, #0
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fb f9d3 	bl	80007a4 <__aeabi_ddiv>
 80053fe:	ec41 0b10 	vmov	d0, r0, r1
 8005402:	b003      	add	sp, #12
 8005404:	ecbd 8b04 	vpop	{d8-d9}
 8005408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	2900      	cmp	r1, #0
 800540e:	da05      	bge.n	800541c <__ieee754_log+0x4c>
 8005410:	460b      	mov	r3, r1
 8005412:	f7fa fee5 	bl	80001e0 <__aeabi_dsub>
 8005416:	2200      	movs	r2, #0
 8005418:	2300      	movs	r3, #0
 800541a:	e7ee      	b.n	80053fa <__ieee754_log+0x2a>
 800541c:	4bc5      	ldr	r3, [pc, #788]	; (8005734 <__ieee754_log+0x364>)
 800541e:	2200      	movs	r2, #0
 8005420:	f7fb f896 	bl	8000550 <__aeabi_dmul>
 8005424:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005428:	460d      	mov	r5, r1
 800542a:	4ac3      	ldr	r2, [pc, #780]	; (8005738 <__ieee754_log+0x368>)
 800542c:	4295      	cmp	r5, r2
 800542e:	dd06      	ble.n	800543e <__ieee754_log+0x6e>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	f7fa fed6 	bl	80001e4 <__adddf3>
 8005438:	e7e1      	b.n	80053fe <__ieee754_log+0x2e>
 800543a:	2300      	movs	r3, #0
 800543c:	e7f5      	b.n	800542a <__ieee754_log+0x5a>
 800543e:	152c      	asrs	r4, r5, #20
 8005440:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005444:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005448:	441c      	add	r4, r3
 800544a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800544e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005456:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800545a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800545e:	ea42 0105 	orr.w	r1, r2, r5
 8005462:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005466:	2200      	movs	r2, #0
 8005468:	4bb4      	ldr	r3, [pc, #720]	; (800573c <__ieee754_log+0x36c>)
 800546a:	f7fa feb9 	bl	80001e0 <__aeabi_dsub>
 800546e:	1cab      	adds	r3, r5, #2
 8005470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005474:	2b02      	cmp	r3, #2
 8005476:	4682      	mov	sl, r0
 8005478:	468b      	mov	fp, r1
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	dc53      	bgt.n	8005528 <__ieee754_log+0x158>
 8005480:	2300      	movs	r3, #0
 8005482:	f7fb facd 	bl	8000a20 <__aeabi_dcmpeq>
 8005486:	b1d0      	cbz	r0, 80054be <__ieee754_log+0xee>
 8005488:	2c00      	cmp	r4, #0
 800548a:	f000 8122 	beq.w	80056d2 <__ieee754_log+0x302>
 800548e:	4620      	mov	r0, r4
 8005490:	f7fa fff4 	bl	800047c <__aeabi_i2d>
 8005494:	a390      	add	r3, pc, #576	; (adr r3, 80056d8 <__ieee754_log+0x308>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	4606      	mov	r6, r0
 800549c:	460f      	mov	r7, r1
 800549e:	f7fb f857 	bl	8000550 <__aeabi_dmul>
 80054a2:	a38f      	add	r3, pc, #572	; (adr r3, 80056e0 <__ieee754_log+0x310>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	4604      	mov	r4, r0
 80054aa:	460d      	mov	r5, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb f84e 	bl	8000550 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4620      	mov	r0, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	e7ba      	b.n	8005434 <__ieee754_log+0x64>
 80054be:	a38a      	add	r3, pc, #552	; (adr r3, 80056e8 <__ieee754_log+0x318>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	4650      	mov	r0, sl
 80054c6:	4659      	mov	r1, fp
 80054c8:	f7fb f842 	bl	8000550 <__aeabi_dmul>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	2000      	movs	r0, #0
 80054d2:	499b      	ldr	r1, [pc, #620]	; (8005740 <__ieee754_log+0x370>)
 80054d4:	f7fa fe84 	bl	80001e0 <__aeabi_dsub>
 80054d8:	4652      	mov	r2, sl
 80054da:	4606      	mov	r6, r0
 80054dc:	460f      	mov	r7, r1
 80054de:	465b      	mov	r3, fp
 80054e0:	4650      	mov	r0, sl
 80054e2:	4659      	mov	r1, fp
 80054e4:	f7fb f834 	bl	8000550 <__aeabi_dmul>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	f7fb f82e 	bl	8000550 <__aeabi_dmul>
 80054f4:	4606      	mov	r6, r0
 80054f6:	460f      	mov	r7, r1
 80054f8:	b914      	cbnz	r4, 8005500 <__ieee754_log+0x130>
 80054fa:	4632      	mov	r2, r6
 80054fc:	463b      	mov	r3, r7
 80054fe:	e0a2      	b.n	8005646 <__ieee754_log+0x276>
 8005500:	4620      	mov	r0, r4
 8005502:	f7fa ffbb 	bl	800047c <__aeabi_i2d>
 8005506:	a374      	add	r3, pc, #464	; (adr r3, 80056d8 <__ieee754_log+0x308>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	4680      	mov	r8, r0
 800550e:	4689      	mov	r9, r1
 8005510:	f7fb f81e 	bl	8000550 <__aeabi_dmul>
 8005514:	a372      	add	r3, pc, #456	; (adr r3, 80056e0 <__ieee754_log+0x310>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	4640      	mov	r0, r8
 8005520:	4649      	mov	r1, r9
 8005522:	f7fb f815 	bl	8000550 <__aeabi_dmul>
 8005526:	e0a7      	b.n	8005678 <__ieee754_log+0x2a8>
 8005528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800552c:	f7fa fe5a 	bl	80001e4 <__adddf3>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4650      	mov	r0, sl
 8005536:	4659      	mov	r1, fp
 8005538:	f7fb f934 	bl	80007a4 <__aeabi_ddiv>
 800553c:	ec41 0b18 	vmov	d8, r0, r1
 8005540:	4620      	mov	r0, r4
 8005542:	f7fa ff9b 	bl	800047c <__aeabi_i2d>
 8005546:	ec53 2b18 	vmov	r2, r3, d8
 800554a:	ec41 0b19 	vmov	d9, r0, r1
 800554e:	ec51 0b18 	vmov	r0, r1, d8
 8005552:	f7fa fffd 	bl	8000550 <__aeabi_dmul>
 8005556:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800555a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4680      	mov	r8, r0
 8005566:	4689      	mov	r9, r1
 8005568:	f7fa fff2 	bl	8000550 <__aeabi_dmul>
 800556c:	a360      	add	r3, pc, #384	; (adr r3, 80056f0 <__ieee754_log+0x320>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	4606      	mov	r6, r0
 8005574:	460f      	mov	r7, r1
 8005576:	f7fa ffeb 	bl	8000550 <__aeabi_dmul>
 800557a:	a35f      	add	r3, pc, #380	; (adr r3, 80056f8 <__ieee754_log+0x328>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fa fe30 	bl	80001e4 <__adddf3>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	f7fa ffe2 	bl	8000550 <__aeabi_dmul>
 800558c:	a35c      	add	r3, pc, #368	; (adr r3, 8005700 <__ieee754_log+0x330>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fa fe27 	bl	80001e4 <__adddf3>
 8005596:	4632      	mov	r2, r6
 8005598:	463b      	mov	r3, r7
 800559a:	f7fa ffd9 	bl	8000550 <__aeabi_dmul>
 800559e:	a35a      	add	r3, pc, #360	; (adr r3, 8005708 <__ieee754_log+0x338>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f7fa fe1e 	bl	80001e4 <__adddf3>
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	f7fa ffd0 	bl	8000550 <__aeabi_dmul>
 80055b0:	a357      	add	r3, pc, #348	; (adr r3, 8005710 <__ieee754_log+0x340>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	4680      	mov	r8, r0
 80055b8:	4689      	mov	r9, r1
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	f7fa ffc7 	bl	8000550 <__aeabi_dmul>
 80055c2:	a355      	add	r3, pc, #340	; (adr r3, 8005718 <__ieee754_log+0x348>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f7fa fe0c 	bl	80001e4 <__adddf3>
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	f7fa ffbe 	bl	8000550 <__aeabi_dmul>
 80055d4:	a352      	add	r3, pc, #328	; (adr r3, 8005720 <__ieee754_log+0x350>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa fe03 	bl	80001e4 <__adddf3>
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	f7fa ffb5 	bl	8000550 <__aeabi_dmul>
 80055e6:	460b      	mov	r3, r1
 80055e8:	4602      	mov	r2, r0
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	f7fa fdf9 	bl	80001e4 <__adddf3>
 80055f2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	3551      	adds	r5, #81	; 0x51
 80055fa:	431d      	orrs	r5, r3
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	4680      	mov	r8, r0
 8005600:	4689      	mov	r9, r1
 8005602:	dd48      	ble.n	8005696 <__ieee754_log+0x2c6>
 8005604:	4b4e      	ldr	r3, [pc, #312]	; (8005740 <__ieee754_log+0x370>)
 8005606:	2200      	movs	r2, #0
 8005608:	4650      	mov	r0, sl
 800560a:	4659      	mov	r1, fp
 800560c:	f7fa ffa0 	bl	8000550 <__aeabi_dmul>
 8005610:	4652      	mov	r2, sl
 8005612:	465b      	mov	r3, fp
 8005614:	f7fa ff9c 	bl	8000550 <__aeabi_dmul>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4606      	mov	r6, r0
 800561e:	460f      	mov	r7, r1
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa fdde 	bl	80001e4 <__adddf3>
 8005628:	ec53 2b18 	vmov	r2, r3, d8
 800562c:	f7fa ff90 	bl	8000550 <__aeabi_dmul>
 8005630:	4680      	mov	r8, r0
 8005632:	4689      	mov	r9, r1
 8005634:	b964      	cbnz	r4, 8005650 <__ieee754_log+0x280>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4630      	mov	r0, r6
 800563c:	4639      	mov	r1, r7
 800563e:	f7fa fdcf 	bl	80001e0 <__aeabi_dsub>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4650      	mov	r0, sl
 8005648:	4659      	mov	r1, fp
 800564a:	f7fa fdc9 	bl	80001e0 <__aeabi_dsub>
 800564e:	e6d6      	b.n	80053fe <__ieee754_log+0x2e>
 8005650:	a321      	add	r3, pc, #132	; (adr r3, 80056d8 <__ieee754_log+0x308>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	ec51 0b19 	vmov	r0, r1, d9
 800565a:	f7fa ff79 	bl	8000550 <__aeabi_dmul>
 800565e:	a320      	add	r3, pc, #128	; (adr r3, 80056e0 <__ieee754_log+0x310>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	4604      	mov	r4, r0
 8005666:	460d      	mov	r5, r1
 8005668:	ec51 0b19 	vmov	r0, r1, d9
 800566c:	f7fa ff70 	bl	8000550 <__aeabi_dmul>
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	f7fa fdb6 	bl	80001e4 <__adddf3>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fa fdae 	bl	80001e0 <__aeabi_dsub>
 8005684:	4652      	mov	r2, sl
 8005686:	465b      	mov	r3, fp
 8005688:	f7fa fdaa 	bl	80001e0 <__aeabi_dsub>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	e7d9      	b.n	800564a <__ieee754_log+0x27a>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4650      	mov	r0, sl
 800569c:	4659      	mov	r1, fp
 800569e:	f7fa fd9f 	bl	80001e0 <__aeabi_dsub>
 80056a2:	ec53 2b18 	vmov	r2, r3, d8
 80056a6:	f7fa ff53 	bl	8000550 <__aeabi_dmul>
 80056aa:	4606      	mov	r6, r0
 80056ac:	460f      	mov	r7, r1
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	f43f af23 	beq.w	80054fa <__ieee754_log+0x12a>
 80056b4:	a308      	add	r3, pc, #32	; (adr r3, 80056d8 <__ieee754_log+0x308>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	ec51 0b19 	vmov	r0, r1, d9
 80056be:	f7fa ff47 	bl	8000550 <__aeabi_dmul>
 80056c2:	a307      	add	r3, pc, #28	; (adr r3, 80056e0 <__ieee754_log+0x310>)
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	4604      	mov	r4, r0
 80056ca:	460d      	mov	r5, r1
 80056cc:	ec51 0b19 	vmov	r0, r1, d9
 80056d0:	e727      	b.n	8005522 <__ieee754_log+0x152>
 80056d2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005728 <__ieee754_log+0x358>
 80056d6:	e694      	b.n	8005402 <__ieee754_log+0x32>
 80056d8:	fee00000 	.word	0xfee00000
 80056dc:	3fe62e42 	.word	0x3fe62e42
 80056e0:	35793c76 	.word	0x35793c76
 80056e4:	3dea39ef 	.word	0x3dea39ef
 80056e8:	55555555 	.word	0x55555555
 80056ec:	3fd55555 	.word	0x3fd55555
 80056f0:	df3e5244 	.word	0xdf3e5244
 80056f4:	3fc2f112 	.word	0x3fc2f112
 80056f8:	96cb03de 	.word	0x96cb03de
 80056fc:	3fc74664 	.word	0x3fc74664
 8005700:	94229359 	.word	0x94229359
 8005704:	3fd24924 	.word	0x3fd24924
 8005708:	55555593 	.word	0x55555593
 800570c:	3fe55555 	.word	0x3fe55555
 8005710:	d078c69f 	.word	0xd078c69f
 8005714:	3fc39a09 	.word	0x3fc39a09
 8005718:	1d8e78af 	.word	0x1d8e78af
 800571c:	3fcc71c5 	.word	0x3fcc71c5
 8005720:	9997fa04 	.word	0x9997fa04
 8005724:	3fd99999 	.word	0x3fd99999
	...
 8005730:	c3500000 	.word	0xc3500000
 8005734:	43500000 	.word	0x43500000
 8005738:	7fefffff 	.word	0x7fefffff
 800573c:	3ff00000 	.word	0x3ff00000
 8005740:	3fe00000 	.word	0x3fe00000

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
